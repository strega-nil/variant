#include <type_traits>
#include <cstdint>
#include <functional>
#define VARIANT_NARG_(...) VARIANT_NARG_I_(__VA_ARGS__,VARIANT_RSEQ_N())
#define VARIANT_NARG_I_(...)VARIANT_ARG_N(__VA_ARGS__)
#define VARIANT_ARG_N(N,_1,_2,_3,_4,_5,_6,_7,_8,_9,_a,_b,_c,_d,_e,_f,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_1a,_1b,_1c,_1d,_1e,_1f,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_2a,_2b,_2c,_2d,_2e,_2f,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_3a,_3b,_3c,_3d,_3e,_3f,_40,M,...) M
#define VARIANT_RSEQ_N() 20,r,1f,r,1e,r,1d,r,1c,r,1b,r,1a,r,19,r,18,r,17,r,16,r,15,r,14,r,13,r,12,r,11,r,10,r,f,r,e,r,d,r,c,r,b,r,a,r,9,r,8,r,7,r,6,r,5,r,4,r,3,r,2,r,1,r
#define _VFUNC_(N,M) N##M
#define _VFUNC(N,M) _VFUNC_(N,M)
#define VFUNC(FUNC,...) _VFUNC(FUNC,VARIANT_NARG_(__VA_ARGS__)) (__VA_ARGS__)
#define end_adt() };
#define adt(N,...) VFUNC(adt,N,__VA_ARGS__)
#define adtr(N,...) static_assert(false,"Incorrect number of arguments to adt("#N", ...");
#define _impl_adt_real(T) std::conditional_t<std::is_void<T>::value,char,T>

#define _impl_adt_K1(N,V1,T1) V1,
#define _impl_adt_D1(N,V1,T1)data(){std::memset(this,0,sizeof(*this));}~data()noexcept{}data(data const& d)noexcept{std::memcpy(this,&d,sizeof(*this));}data& operator=(data const& d)noexcept{new(this) data(d);return *this;}_impl_adt_real(T1)V1;
#define _impl_adt_MF1(N,V1,T1) static void _no_op(){}std::function<void()>default_=_no_op;std::function<void(T1)>V1##_;
#define _impl_adt_MM1(N,V1,T1) private:template<class t,class...args>static void _call_func(std::function<void(args...)>,t);template<class t>static void _call_func(std::function<void()>f,t){f();}template<class t>static void _call_func(std::function<void(t)>f,t g){f(g);}public:matcher(){}matcher const& _(std::function<void()>f){default_=f;return *this;}template<class T=T1>void call_##V1(_impl_adt_real(T1)a)const{_call_func(V1##_, a);}matcher& V1(std::function<void(T1)>f){V1##_=f;return *this;}
#define _impl_adt_M1(N,V1,T1) private:N(kind k):kind_(k){}public:template<class T=T1,class=std::enable_if_t<!std::is_void<T>::value>>static N V1(_impl_adt_real(T1)const& t){N ret(kind::V1);try{new(&ret.data_.V1)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1,class=std::enable_if_t<!std::is_void<T>::value>>static N V1(_impl_adt_real(T1)&& t){N ret(kind::V1);try{new(&ret.data_.V1)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1,class=std::enable_if_t<std::is_void<T>::value>>static N V1(){N ret(kind::V1);return ret;}
#define _impl_adt_MS1(N,V1,T1) case kind::V1:m.call_##V1(data_.V1);break;
#define _impl_adt_Ds1(N,V1,T1) case kind::V1:data_.V1.~decltype(data_.V1)();break;
#define _impl_adt_Cc1(N,V1,T1) case kind::V1:new(&data_.V1)decltype(data_.V1)(a.data_.V1);break;
#define _impl_adt_Mc1(N,V1,T1) case kind::V1:new(&data_.V1)decltype(data_.V1)(std::move(a.data_.V1));break;
#define adt1(N,V1,T1) class N{public:enum class kind{_impl_adt_K1(N,V1,T1)};private:kind kind_;union data{_impl_adt_D1(N,V1,T1)}data_;public:class matcher{_impl_adt_MF1(N,V1,T1)public:_impl_adt_MM1(N,V1,T1)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc1(N,V1,T1)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc1(N,V1,T1)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds1(N,V1,T1)}}_impl_adt_M1(N,V1,T1)void match(matcher const& m){switch(kind_){_impl_adt_MS1(N,V1,T1)}}private:
#define _impl_adt_K2(N,V1,T1,V2,T2) _impl_adt_K1(N,V1,T1)V2,
#define _impl_adt_D2(N,V1,T1,V2,T2)_impl_adt_D1(N,V1,T1)_impl_adt_real(T2)V2;
#define _impl_adt_MF2(N,V1,T1,V2,T2) _impl_adt_MF1(N,V1,T1)std::function<void(T2)>V2##_;
#define _impl_adt_MM2(N,V1,T1,V2,T2) _impl_adt_MM1(N,V1,T1)template<class T=T2>void call_##V2(_impl_adt_real(T2)a)const{_call_func(V2##_, a);}matcher& V2(std::function<void(T2)>f){V2##_=f;return *this;}
#define _impl_adt_M2(N,V1,T1,V2,T2) _impl_adt_M1(N,V1,T1)template<class T=T2,class=std::enable_if_t<!std::is_void<T>::value>>static N V2(_impl_adt_real(T2)const& t){N ret(kind::V2);try{new(&ret.data_.V2)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2,class=std::enable_if_t<!std::is_void<T>::value>>static N V2(_impl_adt_real(T2)&& t){N ret(kind::V2);try{new(&ret.data_.V2)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2,class=std::enable_if_t<std::is_void<T>::value>>static N V2(){N ret(kind::V2);return ret;}
#define _impl_adt_MS2(N,V1,T1,V2,T2) _impl_adt_MS1(N,V1,T1)case kind::V2:m.call_##V2(data_.V2);break;
#define _impl_adt_Ds2(N,V1,T1,V2,T2) _impl_adt_Ds1(N,V1,T1)case kind::V2:data_.V2.~decltype(data_.V2)();break;
#define _impl_adt_Cc2(N,V1,T1,V2,T2) _impl_adt_Cc1(N,V1,T1)case kind::V2:new(&data_.V2)decltype(data_.V2)(a.data_.V2);break;
#define _impl_adt_Mc2(N,V1,T1,V2,T2) _impl_adt_Mc1(N,V1,T1)case kind::V2:new(&data_.V2)decltype(data_.V2)(std::move(a.data_.V2));break;
#define adt2(N,V1,T1,V2,T2) class N{public:enum class kind{_impl_adt_K2(N,V1,T1,V2,T2)};private:kind kind_;union data{_impl_adt_D2(N,V1,T1,V2,T2)}data_;public:class matcher{_impl_adt_MF2(N,V1,T1,V2,T2)public:_impl_adt_MM2(N,V1,T1,V2,T2)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc2(N,V1,T1,V2,T2)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc2(N,V1,T1,V2,T2)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds2(N,V1,T1,V2,T2)}}_impl_adt_M2(N,V1,T1,V2,T2)void match(matcher const& m){switch(kind_){_impl_adt_MS2(N,V1,T1,V2,T2)}}private:
#define _impl_adt_K3(N,V1,T1,V2,T2,V3,T3) _impl_adt_K2(N,V1,T1,V2,T2)V3,
#define _impl_adt_D3(N,V1,T1,V2,T2,V3,T3)_impl_adt_D2(N,V1,T1,V2,T2)_impl_adt_real(T3)V3;
#define _impl_adt_MF3(N,V1,T1,V2,T2,V3,T3) _impl_adt_MF2(N,V1,T1,V2,T2)std::function<void(T3)>V3##_;
#define _impl_adt_MM3(N,V1,T1,V2,T2,V3,T3) _impl_adt_MM2(N,V1,T1,V2,T2)template<class T=T3>void call_##V3(_impl_adt_real(T3)a)const{_call_func(V3##_, a);}matcher& V3(std::function<void(T3)>f){V3##_=f;return *this;}
#define _impl_adt_M3(N,V1,T1,V2,T2,V3,T3) _impl_adt_M2(N,V1,T1,V2,T2)template<class T=T3,class=std::enable_if_t<!std::is_void<T>::value>>static N V3(_impl_adt_real(T3)const& t){N ret(kind::V3);try{new(&ret.data_.V3)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3,class=std::enable_if_t<!std::is_void<T>::value>>static N V3(_impl_adt_real(T3)&& t){N ret(kind::V3);try{new(&ret.data_.V3)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3,class=std::enable_if_t<std::is_void<T>::value>>static N V3(){N ret(kind::V3);return ret;}
#define _impl_adt_MS3(N,V1,T1,V2,T2,V3,T3) _impl_adt_MS2(N,V1,T1,V2,T2)case kind::V3:m.call_##V3(data_.V3);break;
#define _impl_adt_Ds3(N,V1,T1,V2,T2,V3,T3) _impl_adt_Ds2(N,V1,T1,V2,T2)case kind::V3:data_.V3.~decltype(data_.V3)();break;
#define _impl_adt_Cc3(N,V1,T1,V2,T2,V3,T3) _impl_adt_Cc2(N,V1,T1,V2,T2)case kind::V3:new(&data_.V3)decltype(data_.V3)(a.data_.V3);break;
#define _impl_adt_Mc3(N,V1,T1,V2,T2,V3,T3) _impl_adt_Mc2(N,V1,T1,V2,T2)case kind::V3:new(&data_.V3)decltype(data_.V3)(std::move(a.data_.V3));break;
#define adt3(N,V1,T1,V2,T2,V3,T3) class N{public:enum class kind{_impl_adt_K3(N,V1,T1,V2,T2,V3,T3)};private:kind kind_;union data{_impl_adt_D3(N,V1,T1,V2,T2,V3,T3)}data_;public:class matcher{_impl_adt_MF3(N,V1,T1,V2,T2,V3,T3)public:_impl_adt_MM3(N,V1,T1,V2,T2,V3,T3)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc3(N,V1,T1,V2,T2,V3,T3)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc3(N,V1,T1,V2,T2,V3,T3)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds3(N,V1,T1,V2,T2,V3,T3)}}_impl_adt_M3(N,V1,T1,V2,T2,V3,T3)void match(matcher const& m){switch(kind_){_impl_adt_MS3(N,V1,T1,V2,T2,V3,T3)}}private:
#define _impl_adt_K4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_K3(N,V1,T1,V2,T2,V3,T3)V4,
#define _impl_adt_D4(N,V1,T1,V2,T2,V3,T3,V4,T4)_impl_adt_D3(N,V1,T1,V2,T2,V3,T3)_impl_adt_real(T4)V4;
#define _impl_adt_MF4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_MF3(N,V1,T1,V2,T2,V3,T3)std::function<void(T4)>V4##_;
#define _impl_adt_MM4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_MM3(N,V1,T1,V2,T2,V3,T3)template<class T=T4>void call_##V4(_impl_adt_real(T4)a)const{_call_func(V4##_, a);}matcher& V4(std::function<void(T4)>f){V4##_=f;return *this;}
#define _impl_adt_M4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_M3(N,V1,T1,V2,T2,V3,T3)template<class T=T4,class=std::enable_if_t<!std::is_void<T>::value>>static N V4(_impl_adt_real(T4)const& t){N ret(kind::V4);try{new(&ret.data_.V4)T(t);}catch(...){std::terminate();}return ret;}template<class T=T4,class=std::enable_if_t<!std::is_void<T>::value>>static N V4(_impl_adt_real(T4)&& t){N ret(kind::V4);try{new(&ret.data_.V4)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T4,class=std::enable_if_t<std::is_void<T>::value>>static N V4(){N ret(kind::V4);return ret;}
#define _impl_adt_MS4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_MS3(N,V1,T1,V2,T2,V3,T3)case kind::V4:m.call_##V4(data_.V4);break;
#define _impl_adt_Ds4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_Ds3(N,V1,T1,V2,T2,V3,T3)case kind::V4:data_.V4.~decltype(data_.V4)();break;
#define _impl_adt_Cc4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_Cc3(N,V1,T1,V2,T2,V3,T3)case kind::V4:new(&data_.V4)decltype(data_.V4)(a.data_.V4);break;
#define _impl_adt_Mc4(N,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_Mc3(N,V1,T1,V2,T2,V3,T3)case kind::V4:new(&data_.V4)decltype(data_.V4)(std::move(a.data_.V4));break;
#define adt4(N,V1,T1,V2,T2,V3,T3,V4,T4) class N{public:enum class kind{_impl_adt_K4(N,V1,T1,V2,T2,V3,T3,V4,T4)};private:kind kind_;union data{_impl_adt_D4(N,V1,T1,V2,T2,V3,T3,V4,T4)}data_;public:class matcher{_impl_adt_MF4(N,V1,T1,V2,T2,V3,T3,V4,T4)public:_impl_adt_MM4(N,V1,T1,V2,T2,V3,T3,V4,T4)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc4(N,V1,T1,V2,T2,V3,T3,V4,T4)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc4(N,V1,T1,V2,T2,V3,T3,V4,T4)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds4(N,V1,T1,V2,T2,V3,T3,V4,T4)}}_impl_adt_M4(N,V1,T1,V2,T2,V3,T3,V4,T4)void match(matcher const& m){switch(kind_){_impl_adt_MS4(N,V1,T1,V2,T2,V3,T3,V4,T4)}}private:
#define _impl_adt_K5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_K4(N,V1,T1,V2,T2,V3,T3,V4,T4)V5,
#define _impl_adt_D5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)_impl_adt_D4(N,V1,T1,V2,T2,V3,T3,V4,T4)_impl_adt_real(T5)V5;
#define _impl_adt_MF5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_MF4(N,V1,T1,V2,T2,V3,T3,V4,T4)std::function<void(T5)>V5##_;
#define _impl_adt_MM5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_MM4(N,V1,T1,V2,T2,V3,T3,V4,T4)template<class T=T5>void call_##V5(_impl_adt_real(T5)a)const{_call_func(V5##_, a);}matcher& V5(std::function<void(T5)>f){V5##_=f;return *this;}
#define _impl_adt_M5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_M4(N,V1,T1,V2,T2,V3,T3,V4,T4)template<class T=T5,class=std::enable_if_t<!std::is_void<T>::value>>static N V5(_impl_adt_real(T5)const& t){N ret(kind::V5);try{new(&ret.data_.V5)T(t);}catch(...){std::terminate();}return ret;}template<class T=T5,class=std::enable_if_t<!std::is_void<T>::value>>static N V5(_impl_adt_real(T5)&& t){N ret(kind::V5);try{new(&ret.data_.V5)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T5,class=std::enable_if_t<std::is_void<T>::value>>static N V5(){N ret(kind::V5);return ret;}
#define _impl_adt_MS5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_MS4(N,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:m.call_##V5(data_.V5);break;
#define _impl_adt_Ds5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_Ds4(N,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:data_.V5.~decltype(data_.V5)();break;
#define _impl_adt_Cc5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_Cc4(N,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:new(&data_.V5)decltype(data_.V5)(a.data_.V5);break;
#define _impl_adt_Mc5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_Mc4(N,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:new(&data_.V5)decltype(data_.V5)(std::move(a.data_.V5));break;
#define adt5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) class N{public:enum class kind{_impl_adt_K5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)};private:kind kind_;union data{_impl_adt_D5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}data_;public:class matcher{_impl_adt_MF5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)public:_impl_adt_MM5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}_impl_adt_M5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)void match(matcher const& m){switch(kind_){_impl_adt_MS5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}private:
#define _impl_adt_K6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_K5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)V6,
#define _impl_adt_D6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)_impl_adt_D5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)_impl_adt_real(T6)V6;
#define _impl_adt_MF6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_MF5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)std::function<void(T6)>V6##_;
#define _impl_adt_MM6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_MM5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)template<class T=T6>void call_##V6(_impl_adt_real(T6)a)const{_call_func(V6##_, a);}matcher& V6(std::function<void(T6)>f){V6##_=f;return *this;}
#define _impl_adt_M6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_M5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)template<class T=T6,class=std::enable_if_t<!std::is_void<T>::value>>static N V6(_impl_adt_real(T6)const& t){N ret(kind::V6);try{new(&ret.data_.V6)T(t);}catch(...){std::terminate();}return ret;}template<class T=T6,class=std::enable_if_t<!std::is_void<T>::value>>static N V6(_impl_adt_real(T6)&& t){N ret(kind::V6);try{new(&ret.data_.V6)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T6,class=std::enable_if_t<std::is_void<T>::value>>static N V6(){N ret(kind::V6);return ret;}
#define _impl_adt_MS6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_MS5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:m.call_##V6(data_.V6);break;
#define _impl_adt_Ds6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_Ds5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:data_.V6.~decltype(data_.V6)();break;
#define _impl_adt_Cc6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_Cc5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:new(&data_.V6)decltype(data_.V6)(a.data_.V6);break;
#define _impl_adt_Mc6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_Mc5(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:new(&data_.V6)decltype(data_.V6)(std::move(a.data_.V6));break;
#define adt6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) class N{public:enum class kind{_impl_adt_K6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)};private:kind kind_;union data{_impl_adt_D6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}data_;public:class matcher{_impl_adt_MF6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)public:_impl_adt_MM6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}_impl_adt_M6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)void match(matcher const& m){switch(kind_){_impl_adt_MS6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}private:
#define _impl_adt_K7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_K6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)V7,
#define _impl_adt_D7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)_impl_adt_D6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)_impl_adt_real(T7)V7;
#define _impl_adt_MF7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_MF6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)std::function<void(T7)>V7##_;
#define _impl_adt_MM7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_MM6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)template<class T=T7>void call_##V7(_impl_adt_real(T7)a)const{_call_func(V7##_, a);}matcher& V7(std::function<void(T7)>f){V7##_=f;return *this;}
#define _impl_adt_M7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_M6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)template<class T=T7,class=std::enable_if_t<!std::is_void<T>::value>>static N V7(_impl_adt_real(T7)const& t){N ret(kind::V7);try{new(&ret.data_.V7)T(t);}catch(...){std::terminate();}return ret;}template<class T=T7,class=std::enable_if_t<!std::is_void<T>::value>>static N V7(_impl_adt_real(T7)&& t){N ret(kind::V7);try{new(&ret.data_.V7)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T7,class=std::enable_if_t<std::is_void<T>::value>>static N V7(){N ret(kind::V7);return ret;}
#define _impl_adt_MS7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_MS6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:m.call_##V7(data_.V7);break;
#define _impl_adt_Ds7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_Ds6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:data_.V7.~decltype(data_.V7)();break;
#define _impl_adt_Cc7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_Cc6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:new(&data_.V7)decltype(data_.V7)(a.data_.V7);break;
#define _impl_adt_Mc7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_Mc6(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:new(&data_.V7)decltype(data_.V7)(std::move(a.data_.V7));break;
#define adt7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) class N{public:enum class kind{_impl_adt_K7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)};private:kind kind_;union data{_impl_adt_D7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}data_;public:class matcher{_impl_adt_MF7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)public:_impl_adt_MM7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}_impl_adt_M7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)void match(matcher const& m){switch(kind_){_impl_adt_MS7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}private:
#define _impl_adt_K8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_K7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)V8,
#define _impl_adt_D8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)_impl_adt_D7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)_impl_adt_real(T8)V8;
#define _impl_adt_MF8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_MF7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)std::function<void(T8)>V8##_;
#define _impl_adt_MM8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_MM7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)template<class T=T8>void call_##V8(_impl_adt_real(T8)a)const{_call_func(V8##_, a);}matcher& V8(std::function<void(T8)>f){V8##_=f;return *this;}
#define _impl_adt_M8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_M7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)template<class T=T8,class=std::enable_if_t<!std::is_void<T>::value>>static N V8(_impl_adt_real(T8)const& t){N ret(kind::V8);try{new(&ret.data_.V8)T(t);}catch(...){std::terminate();}return ret;}template<class T=T8,class=std::enable_if_t<!std::is_void<T>::value>>static N V8(_impl_adt_real(T8)&& t){N ret(kind::V8);try{new(&ret.data_.V8)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T8,class=std::enable_if_t<std::is_void<T>::value>>static N V8(){N ret(kind::V8);return ret;}
#define _impl_adt_MS8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_MS7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:m.call_##V8(data_.V8);break;
#define _impl_adt_Ds8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_Ds7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:data_.V8.~decltype(data_.V8)();break;
#define _impl_adt_Cc8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_Cc7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:new(&data_.V8)decltype(data_.V8)(a.data_.V8);break;
#define _impl_adt_Mc8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_Mc7(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:new(&data_.V8)decltype(data_.V8)(std::move(a.data_.V8));break;
#define adt8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) class N{public:enum class kind{_impl_adt_K8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)};private:kind kind_;union data{_impl_adt_D8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}data_;public:class matcher{_impl_adt_MF8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)public:_impl_adt_MM8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}_impl_adt_M8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)void match(matcher const& m){switch(kind_){_impl_adt_MS8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}private:
#define _impl_adt_K9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_K8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)V9,
#define _impl_adt_D9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)_impl_adt_D8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)_impl_adt_real(T9)V9;
#define _impl_adt_MF9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_MF8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)std::function<void(T9)>V9##_;
#define _impl_adt_MM9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_MM8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)template<class T=T9>void call_##V9(_impl_adt_real(T9)a)const{_call_func(V9##_, a);}matcher& V9(std::function<void(T9)>f){V9##_=f;return *this;}
#define _impl_adt_M9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_M8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)template<class T=T9,class=std::enable_if_t<!std::is_void<T>::value>>static N V9(_impl_adt_real(T9)const& t){N ret(kind::V9);try{new(&ret.data_.V9)T(t);}catch(...){std::terminate();}return ret;}template<class T=T9,class=std::enable_if_t<!std::is_void<T>::value>>static N V9(_impl_adt_real(T9)&& t){N ret(kind::V9);try{new(&ret.data_.V9)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T9,class=std::enable_if_t<std::is_void<T>::value>>static N V9(){N ret(kind::V9);return ret;}
#define _impl_adt_MS9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_MS8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:m.call_##V9(data_.V9);break;
#define _impl_adt_Ds9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_Ds8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:data_.V9.~decltype(data_.V9)();break;
#define _impl_adt_Cc9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_Cc8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:new(&data_.V9)decltype(data_.V9)(a.data_.V9);break;
#define _impl_adt_Mc9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_Mc8(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:new(&data_.V9)decltype(data_.V9)(std::move(a.data_.V9));break;
#define adt9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) class N{public:enum class kind{_impl_adt_K9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)};private:kind kind_;union data{_impl_adt_D9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}data_;public:class matcher{_impl_adt_MF9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)public:_impl_adt_MM9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}_impl_adt_M9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)void match(matcher const& m){switch(kind_){_impl_adt_MS9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}private:
#define _impl_adt_Ka(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_K9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)Va,
#define _impl_adt_Da(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)_impl_adt_D9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)_impl_adt_real(Ta)Va;
#define _impl_adt_MFa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_MF9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)std::function<void(Ta)>Va##_;
#define _impl_adt_MMa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_MM9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)template<class T=Ta>void call_##Va(_impl_adt_real(Ta)a)const{_call_func(Va##_, a);}matcher& Va(std::function<void(Ta)>f){Va##_=f;return *this;}
#define _impl_adt_Ma(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_M9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)template<class T=Ta,class=std::enable_if_t<!std::is_void<T>::value>>static N Va(_impl_adt_real(Ta)const& t){N ret(kind::Va);try{new(&ret.data_.Va)T(t);}catch(...){std::terminate();}return ret;}template<class T=Ta,class=std::enable_if_t<!std::is_void<T>::value>>static N Va(_impl_adt_real(Ta)&& t){N ret(kind::Va);try{new(&ret.data_.Va)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Ta,class=std::enable_if_t<std::is_void<T>::value>>static N Va(){N ret(kind::Va);return ret;}
#define _impl_adt_MSa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_MS9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:m.call_##Va(data_.Va);break;
#define _impl_adt_Dsa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_Ds9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:data_.Va.~decltype(data_.Va)();break;
#define _impl_adt_Cca(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_Cc9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:new(&data_.Va)decltype(data_.Va)(a.data_.Va);break;
#define _impl_adt_Mca(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_Mc9(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:new(&data_.Va)decltype(data_.Va)(std::move(a.data_.Va));break;
#define adta(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) class N{public:enum class kind{_impl_adt_Ka(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)};private:kind kind_;union data{_impl_adt_Da(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}data_;public:class matcher{_impl_adt_MFa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)public:_impl_adt_MMa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cca(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mca(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Dsa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}_impl_adt_Ma(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)void match(matcher const& m){switch(kind_){_impl_adt_MSa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}private:
#define _impl_adt_Kb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Ka(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)Vb,
#define _impl_adt_Db(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)_impl_adt_Da(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)_impl_adt_real(Tb)Vb;
#define _impl_adt_MFb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_MFa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)std::function<void(Tb)>Vb##_;
#define _impl_adt_MMb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_MMa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)template<class T=Tb>void call_##Vb(_impl_adt_real(Tb)a)const{_call_func(Vb##_, a);}matcher& Vb(std::function<void(Tb)>f){Vb##_=f;return *this;}
#define _impl_adt_Mb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Ma(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)template<class T=Tb,class=std::enable_if_t<!std::is_void<T>::value>>static N Vb(_impl_adt_real(Tb)const& t){N ret(kind::Vb);try{new(&ret.data_.Vb)T(t);}catch(...){std::terminate();}return ret;}template<class T=Tb,class=std::enable_if_t<!std::is_void<T>::value>>static N Vb(_impl_adt_real(Tb)&& t){N ret(kind::Vb);try{new(&ret.data_.Vb)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Tb,class=std::enable_if_t<std::is_void<T>::value>>static N Vb(){N ret(kind::Vb);return ret;}
#define _impl_adt_MSb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_MSa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:m.call_##Vb(data_.Vb);break;
#define _impl_adt_Dsb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Dsa(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:data_.Vb.~decltype(data_.Vb)();break;
#define _impl_adt_Ccb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Cca(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:new(&data_.Vb)decltype(data_.Vb)(a.data_.Vb);break;
#define _impl_adt_Mcb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Mca(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:new(&data_.Vb)decltype(data_.Vb)(std::move(a.data_.Vb));break;
#define adtb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) class N{public:enum class kind{_impl_adt_Kb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)};private:kind kind_;union data{_impl_adt_Db(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}data_;public:class matcher{_impl_adt_MFb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)public:_impl_adt_MMb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Ccb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mcb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Dsb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}_impl_adt_Mb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)void match(matcher const& m){switch(kind_){_impl_adt_MSb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}private:
#define _impl_adt_Kc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Kb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)Vc,
#define _impl_adt_Dc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)_impl_adt_Db(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)_impl_adt_real(Tc)Vc;
#define _impl_adt_MFc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_MFb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)std::function<void(Tc)>Vc##_;
#define _impl_adt_MMc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_MMb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)template<class T=Tc>void call_##Vc(_impl_adt_real(Tc)a)const{_call_func(Vc##_, a);}matcher& Vc(std::function<void(Tc)>f){Vc##_=f;return *this;}
#define _impl_adt_Mc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Mb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)template<class T=Tc,class=std::enable_if_t<!std::is_void<T>::value>>static N Vc(_impl_adt_real(Tc)const& t){N ret(kind::Vc);try{new(&ret.data_.Vc)T(t);}catch(...){std::terminate();}return ret;}template<class T=Tc,class=std::enable_if_t<!std::is_void<T>::value>>static N Vc(_impl_adt_real(Tc)&& t){N ret(kind::Vc);try{new(&ret.data_.Vc)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Tc,class=std::enable_if_t<std::is_void<T>::value>>static N Vc(){N ret(kind::Vc);return ret;}
#define _impl_adt_MSc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_MSb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:m.call_##Vc(data_.Vc);break;
#define _impl_adt_Dsc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Dsb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:data_.Vc.~decltype(data_.Vc)();break;
#define _impl_adt_Ccc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Ccb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:new(&data_.Vc)decltype(data_.Vc)(a.data_.Vc);break;
#define _impl_adt_Mcc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Mcb(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:new(&data_.Vc)decltype(data_.Vc)(std::move(a.data_.Vc));break;
#define adtc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) class N{public:enum class kind{_impl_adt_Kc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)};private:kind kind_;union data{_impl_adt_Dc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}data_;public:class matcher{_impl_adt_MFc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)public:_impl_adt_MMc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Ccc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mcc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Dsc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}_impl_adt_Mc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)void match(matcher const& m){switch(kind_){_impl_adt_MSc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}private:
#define _impl_adt_Kd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Kc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)Vd,
#define _impl_adt_Dd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)_impl_adt_Dc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)_impl_adt_real(Td)Vd;
#define _impl_adt_MFd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_MFc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)std::function<void(Td)>Vd##_;
#define _impl_adt_MMd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_MMc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)template<class T=Td>void call_##Vd(_impl_adt_real(Td)a)const{_call_func(Vd##_, a);}matcher& Vd(std::function<void(Td)>f){Vd##_=f;return *this;}
#define _impl_adt_Md(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Mc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)template<class T=Td,class=std::enable_if_t<!std::is_void<T>::value>>static N Vd(_impl_adt_real(Td)const& t){N ret(kind::Vd);try{new(&ret.data_.Vd)T(t);}catch(...){std::terminate();}return ret;}template<class T=Td,class=std::enable_if_t<!std::is_void<T>::value>>static N Vd(_impl_adt_real(Td)&& t){N ret(kind::Vd);try{new(&ret.data_.Vd)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Td,class=std::enable_if_t<std::is_void<T>::value>>static N Vd(){N ret(kind::Vd);return ret;}
#define _impl_adt_MSd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_MSc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:m.call_##Vd(data_.Vd);break;
#define _impl_adt_Dsd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Dsc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:data_.Vd.~decltype(data_.Vd)();break;
#define _impl_adt_Ccd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Ccc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:new(&data_.Vd)decltype(data_.Vd)(a.data_.Vd);break;
#define _impl_adt_Mcd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Mcc(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:new(&data_.Vd)decltype(data_.Vd)(std::move(a.data_.Vd));break;
#define adtd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) class N{public:enum class kind{_impl_adt_Kd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)};private:kind kind_;union data{_impl_adt_Dd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}data_;public:class matcher{_impl_adt_MFd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)public:_impl_adt_MMd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Ccd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mcd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Dsd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}_impl_adt_Md(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)void match(matcher const& m){switch(kind_){_impl_adt_MSd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}private:
#define _impl_adt_Ke(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Kd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)Ve,
#define _impl_adt_De(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)_impl_adt_Dd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)_impl_adt_real(Te)Ve;
#define _impl_adt_MFe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_MFd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)std::function<void(Te)>Ve##_;
#define _impl_adt_MMe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_MMd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)template<class T=Te>void call_##Ve(_impl_adt_real(Te)a)const{_call_func(Ve##_, a);}matcher& Ve(std::function<void(Te)>f){Ve##_=f;return *this;}
#define _impl_adt_Me(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Md(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)template<class T=Te,class=std::enable_if_t<!std::is_void<T>::value>>static N Ve(_impl_adt_real(Te)const& t){N ret(kind::Ve);try{new(&ret.data_.Ve)T(t);}catch(...){std::terminate();}return ret;}template<class T=Te,class=std::enable_if_t<!std::is_void<T>::value>>static N Ve(_impl_adt_real(Te)&& t){N ret(kind::Ve);try{new(&ret.data_.Ve)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Te,class=std::enable_if_t<std::is_void<T>::value>>static N Ve(){N ret(kind::Ve);return ret;}
#define _impl_adt_MSe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_MSd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:m.call_##Ve(data_.Ve);break;
#define _impl_adt_Dse(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Dsd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:data_.Ve.~decltype(data_.Ve)();break;
#define _impl_adt_Cce(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Ccd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:new(&data_.Ve)decltype(data_.Ve)(a.data_.Ve);break;
#define _impl_adt_Mce(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Mcd(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:new(&data_.Ve)decltype(data_.Ve)(std::move(a.data_.Ve));break;
#define adte(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) class N{public:enum class kind{_impl_adt_Ke(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)};private:kind kind_;union data{_impl_adt_De(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}data_;public:class matcher{_impl_adt_MFe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)public:_impl_adt_MMe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cce(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mce(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Dse(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}_impl_adt_Me(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)void match(matcher const& m){switch(kind_){_impl_adt_MSe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}private:
#define _impl_adt_Kf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Ke(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)Vf,
#define _impl_adt_Df(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)_impl_adt_De(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)_impl_adt_real(Tf)Vf;
#define _impl_adt_MFf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_MFe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)std::function<void(Tf)>Vf##_;
#define _impl_adt_MMf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_MMe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)template<class T=Tf>void call_##Vf(_impl_adt_real(Tf)a)const{_call_func(Vf##_, a);}matcher& Vf(std::function<void(Tf)>f){Vf##_=f;return *this;}
#define _impl_adt_Mf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Me(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)template<class T=Tf,class=std::enable_if_t<!std::is_void<T>::value>>static N Vf(_impl_adt_real(Tf)const& t){N ret(kind::Vf);try{new(&ret.data_.Vf)T(t);}catch(...){std::terminate();}return ret;}template<class T=Tf,class=std::enable_if_t<!std::is_void<T>::value>>static N Vf(_impl_adt_real(Tf)&& t){N ret(kind::Vf);try{new(&ret.data_.Vf)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Tf,class=std::enable_if_t<std::is_void<T>::value>>static N Vf(){N ret(kind::Vf);return ret;}
#define _impl_adt_MSf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_MSe(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:m.call_##Vf(data_.Vf);break;
#define _impl_adt_Dsf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Dse(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:data_.Vf.~decltype(data_.Vf)();break;
#define _impl_adt_Ccf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Cce(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:new(&data_.Vf)decltype(data_.Vf)(a.data_.Vf);break;
#define _impl_adt_Mcf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Mce(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:new(&data_.Vf)decltype(data_.Vf)(std::move(a.data_.Vf));break;
#define adtf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) class N{public:enum class kind{_impl_adt_Kf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)};private:kind kind_;union data{_impl_adt_Df(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}data_;public:class matcher{_impl_adt_MFf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)public:_impl_adt_MMf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Ccf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mcf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Dsf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}_impl_adt_Mf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)void match(matcher const& m){switch(kind_){_impl_adt_MSf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}private:
#define _impl_adt_K10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Kf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)V10,
#define _impl_adt_D10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)_impl_adt_Df(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)_impl_adt_real(T10)V10;
#define _impl_adt_MF10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_MFf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)std::function<void(T10)>V10##_;
#define _impl_adt_MM10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_MMf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)template<class T=T10>void call_##V10(_impl_adt_real(T10)a)const{_call_func(V10##_, a);}matcher& V10(std::function<void(T10)>f){V10##_=f;return *this;}
#define _impl_adt_M10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Mf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)template<class T=T10,class=std::enable_if_t<!std::is_void<T>::value>>static N V10(_impl_adt_real(T10)const& t){N ret(kind::V10);try{new(&ret.data_.V10)T(t);}catch(...){std::terminate();}return ret;}template<class T=T10,class=std::enable_if_t<!std::is_void<T>::value>>static N V10(_impl_adt_real(T10)&& t){N ret(kind::V10);try{new(&ret.data_.V10)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T10,class=std::enable_if_t<std::is_void<T>::value>>static N V10(){N ret(kind::V10);return ret;}
#define _impl_adt_MS10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_MSf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:m.call_##V10(data_.V10);break;
#define _impl_adt_Ds10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Dsf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:data_.V10.~decltype(data_.V10)();break;
#define _impl_adt_Cc10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Ccf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:new(&data_.V10)decltype(data_.V10)(a.data_.V10);break;
#define _impl_adt_Mc10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Mcf(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:new(&data_.V10)decltype(data_.V10)(std::move(a.data_.V10));break;
#define adt10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) class N{public:enum class kind{_impl_adt_K10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)};private:kind kind_;union data{_impl_adt_D10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}data_;public:class matcher{_impl_adt_MF10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)public:_impl_adt_MM10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}_impl_adt_M10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)void match(matcher const& m){switch(kind_){_impl_adt_MS10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}private:
#define _impl_adt_K11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_K10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)V11,
#define _impl_adt_D11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)_impl_adt_D10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)_impl_adt_real(T11)V11;
#define _impl_adt_MF11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_MF10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)std::function<void(T11)>V11##_;
#define _impl_adt_MM11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_MM10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)template<class T=T11>void call_##V11(_impl_adt_real(T11)a)const{_call_func(V11##_, a);}matcher& V11(std::function<void(T11)>f){V11##_=f;return *this;}
#define _impl_adt_M11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_M10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)template<class T=T11,class=std::enable_if_t<!std::is_void<T>::value>>static N V11(_impl_adt_real(T11)const& t){N ret(kind::V11);try{new(&ret.data_.V11)T(t);}catch(...){std::terminate();}return ret;}template<class T=T11,class=std::enable_if_t<!std::is_void<T>::value>>static N V11(_impl_adt_real(T11)&& t){N ret(kind::V11);try{new(&ret.data_.V11)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T11,class=std::enable_if_t<std::is_void<T>::value>>static N V11(){N ret(kind::V11);return ret;}
#define _impl_adt_MS11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_MS10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:m.call_##V11(data_.V11);break;
#define _impl_adt_Ds11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_Ds10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:data_.V11.~decltype(data_.V11)();break;
#define _impl_adt_Cc11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_Cc10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:new(&data_.V11)decltype(data_.V11)(a.data_.V11);break;
#define _impl_adt_Mc11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_Mc10(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:new(&data_.V11)decltype(data_.V11)(std::move(a.data_.V11));break;
#define adt11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) class N{public:enum class kind{_impl_adt_K11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)};private:kind kind_;union data{_impl_adt_D11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}data_;public:class matcher{_impl_adt_MF11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)public:_impl_adt_MM11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}_impl_adt_M11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)void match(matcher const& m){switch(kind_){_impl_adt_MS11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}private:
#define _impl_adt_K12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_K11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)V12,
#define _impl_adt_D12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)_impl_adt_D11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)_impl_adt_real(T12)V12;
#define _impl_adt_MF12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_MF11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)std::function<void(T12)>V12##_;
#define _impl_adt_MM12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_MM11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)template<class T=T12>void call_##V12(_impl_adt_real(T12)a)const{_call_func(V12##_, a);}matcher& V12(std::function<void(T12)>f){V12##_=f;return *this;}
#define _impl_adt_M12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_M11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)template<class T=T12,class=std::enable_if_t<!std::is_void<T>::value>>static N V12(_impl_adt_real(T12)const& t){N ret(kind::V12);try{new(&ret.data_.V12)T(t);}catch(...){std::terminate();}return ret;}template<class T=T12,class=std::enable_if_t<!std::is_void<T>::value>>static N V12(_impl_adt_real(T12)&& t){N ret(kind::V12);try{new(&ret.data_.V12)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T12,class=std::enable_if_t<std::is_void<T>::value>>static N V12(){N ret(kind::V12);return ret;}
#define _impl_adt_MS12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_MS11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:m.call_##V12(data_.V12);break;
#define _impl_adt_Ds12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_Ds11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:data_.V12.~decltype(data_.V12)();break;
#define _impl_adt_Cc12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_Cc11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:new(&data_.V12)decltype(data_.V12)(a.data_.V12);break;
#define _impl_adt_Mc12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_Mc11(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:new(&data_.V12)decltype(data_.V12)(std::move(a.data_.V12));break;
#define adt12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) class N{public:enum class kind{_impl_adt_K12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)};private:kind kind_;union data{_impl_adt_D12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}data_;public:class matcher{_impl_adt_MF12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)public:_impl_adt_MM12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}_impl_adt_M12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)void match(matcher const& m){switch(kind_){_impl_adt_MS12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}private:
#define _impl_adt_K13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_K12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)V13,
#define _impl_adt_D13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)_impl_adt_D12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)_impl_adt_real(T13)V13;
#define _impl_adt_MF13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_MF12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)std::function<void(T13)>V13##_;
#define _impl_adt_MM13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_MM12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)template<class T=T13>void call_##V13(_impl_adt_real(T13)a)const{_call_func(V13##_, a);}matcher& V13(std::function<void(T13)>f){V13##_=f;return *this;}
#define _impl_adt_M13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_M12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)template<class T=T13,class=std::enable_if_t<!std::is_void<T>::value>>static N V13(_impl_adt_real(T13)const& t){N ret(kind::V13);try{new(&ret.data_.V13)T(t);}catch(...){std::terminate();}return ret;}template<class T=T13,class=std::enable_if_t<!std::is_void<T>::value>>static N V13(_impl_adt_real(T13)&& t){N ret(kind::V13);try{new(&ret.data_.V13)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T13,class=std::enable_if_t<std::is_void<T>::value>>static N V13(){N ret(kind::V13);return ret;}
#define _impl_adt_MS13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_MS12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:m.call_##V13(data_.V13);break;
#define _impl_adt_Ds13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_Ds12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:data_.V13.~decltype(data_.V13)();break;
#define _impl_adt_Cc13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_Cc12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:new(&data_.V13)decltype(data_.V13)(a.data_.V13);break;
#define _impl_adt_Mc13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_Mc12(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:new(&data_.V13)decltype(data_.V13)(std::move(a.data_.V13));break;
#define adt13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) class N{public:enum class kind{_impl_adt_K13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)};private:kind kind_;union data{_impl_adt_D13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}data_;public:class matcher{_impl_adt_MF13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)public:_impl_adt_MM13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}_impl_adt_M13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)void match(matcher const& m){switch(kind_){_impl_adt_MS13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}private:
#define _impl_adt_K14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_K13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)V14,
#define _impl_adt_D14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)_impl_adt_D13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)_impl_adt_real(T14)V14;
#define _impl_adt_MF14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_MF13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)std::function<void(T14)>V14##_;
#define _impl_adt_MM14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_MM13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)template<class T=T14>void call_##V14(_impl_adt_real(T14)a)const{_call_func(V14##_, a);}matcher& V14(std::function<void(T14)>f){V14##_=f;return *this;}
#define _impl_adt_M14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_M13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)template<class T=T14,class=std::enable_if_t<!std::is_void<T>::value>>static N V14(_impl_adt_real(T14)const& t){N ret(kind::V14);try{new(&ret.data_.V14)T(t);}catch(...){std::terminate();}return ret;}template<class T=T14,class=std::enable_if_t<!std::is_void<T>::value>>static N V14(_impl_adt_real(T14)&& t){N ret(kind::V14);try{new(&ret.data_.V14)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T14,class=std::enable_if_t<std::is_void<T>::value>>static N V14(){N ret(kind::V14);return ret;}
#define _impl_adt_MS14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_MS13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:m.call_##V14(data_.V14);break;
#define _impl_adt_Ds14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_Ds13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:data_.V14.~decltype(data_.V14)();break;
#define _impl_adt_Cc14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_Cc13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:new(&data_.V14)decltype(data_.V14)(a.data_.V14);break;
#define _impl_adt_Mc14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_Mc13(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:new(&data_.V14)decltype(data_.V14)(std::move(a.data_.V14));break;
#define adt14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) class N{public:enum class kind{_impl_adt_K14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)};private:kind kind_;union data{_impl_adt_D14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}data_;public:class matcher{_impl_adt_MF14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)public:_impl_adt_MM14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}_impl_adt_M14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)void match(matcher const& m){switch(kind_){_impl_adt_MS14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}private:
#define _impl_adt_K15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_K14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)V15,
#define _impl_adt_D15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)_impl_adt_D14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)_impl_adt_real(T15)V15;
#define _impl_adt_MF15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_MF14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)std::function<void(T15)>V15##_;
#define _impl_adt_MM15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_MM14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)template<class T=T15>void call_##V15(_impl_adt_real(T15)a)const{_call_func(V15##_, a);}matcher& V15(std::function<void(T15)>f){V15##_=f;return *this;}
#define _impl_adt_M15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_M14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)template<class T=T15,class=std::enable_if_t<!std::is_void<T>::value>>static N V15(_impl_adt_real(T15)const& t){N ret(kind::V15);try{new(&ret.data_.V15)T(t);}catch(...){std::terminate();}return ret;}template<class T=T15,class=std::enable_if_t<!std::is_void<T>::value>>static N V15(_impl_adt_real(T15)&& t){N ret(kind::V15);try{new(&ret.data_.V15)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T15,class=std::enable_if_t<std::is_void<T>::value>>static N V15(){N ret(kind::V15);return ret;}
#define _impl_adt_MS15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_MS14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:m.call_##V15(data_.V15);break;
#define _impl_adt_Ds15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_Ds14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:data_.V15.~decltype(data_.V15)();break;
#define _impl_adt_Cc15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_Cc14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:new(&data_.V15)decltype(data_.V15)(a.data_.V15);break;
#define _impl_adt_Mc15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_Mc14(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:new(&data_.V15)decltype(data_.V15)(std::move(a.data_.V15));break;
#define adt15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) class N{public:enum class kind{_impl_adt_K15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)};private:kind kind_;union data{_impl_adt_D15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}data_;public:class matcher{_impl_adt_MF15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)public:_impl_adt_MM15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}_impl_adt_M15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)void match(matcher const& m){switch(kind_){_impl_adt_MS15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}private:
#define _impl_adt_K16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_K15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)V16,
#define _impl_adt_D16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)_impl_adt_D15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)_impl_adt_real(T16)V16;
#define _impl_adt_MF16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_MF15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)std::function<void(T16)>V16##_;
#define _impl_adt_MM16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_MM15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)template<class T=T16>void call_##V16(_impl_adt_real(T16)a)const{_call_func(V16##_, a);}matcher& V16(std::function<void(T16)>f){V16##_=f;return *this;}
#define _impl_adt_M16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_M15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)template<class T=T16,class=std::enable_if_t<!std::is_void<T>::value>>static N V16(_impl_adt_real(T16)const& t){N ret(kind::V16);try{new(&ret.data_.V16)T(t);}catch(...){std::terminate();}return ret;}template<class T=T16,class=std::enable_if_t<!std::is_void<T>::value>>static N V16(_impl_adt_real(T16)&& t){N ret(kind::V16);try{new(&ret.data_.V16)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T16,class=std::enable_if_t<std::is_void<T>::value>>static N V16(){N ret(kind::V16);return ret;}
#define _impl_adt_MS16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_MS15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:m.call_##V16(data_.V16);break;
#define _impl_adt_Ds16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_Ds15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:data_.V16.~decltype(data_.V16)();break;
#define _impl_adt_Cc16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_Cc15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:new(&data_.V16)decltype(data_.V16)(a.data_.V16);break;
#define _impl_adt_Mc16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_Mc15(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:new(&data_.V16)decltype(data_.V16)(std::move(a.data_.V16));break;
#define adt16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) class N{public:enum class kind{_impl_adt_K16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)};private:kind kind_;union data{_impl_adt_D16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}data_;public:class matcher{_impl_adt_MF16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)public:_impl_adt_MM16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}_impl_adt_M16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)void match(matcher const& m){switch(kind_){_impl_adt_MS16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}private:
#define _impl_adt_K17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_K16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)V17,
#define _impl_adt_D17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)_impl_adt_D16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)_impl_adt_real(T17)V17;
#define _impl_adt_MF17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_MF16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)std::function<void(T17)>V17##_;
#define _impl_adt_MM17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_MM16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)template<class T=T17>void call_##V17(_impl_adt_real(T17)a)const{_call_func(V17##_, a);}matcher& V17(std::function<void(T17)>f){V17##_=f;return *this;}
#define _impl_adt_M17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_M16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)template<class T=T17,class=std::enable_if_t<!std::is_void<T>::value>>static N V17(_impl_adt_real(T17)const& t){N ret(kind::V17);try{new(&ret.data_.V17)T(t);}catch(...){std::terminate();}return ret;}template<class T=T17,class=std::enable_if_t<!std::is_void<T>::value>>static N V17(_impl_adt_real(T17)&& t){N ret(kind::V17);try{new(&ret.data_.V17)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T17,class=std::enable_if_t<std::is_void<T>::value>>static N V17(){N ret(kind::V17);return ret;}
#define _impl_adt_MS17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_MS16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:m.call_##V17(data_.V17);break;
#define _impl_adt_Ds17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_Ds16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:data_.V17.~decltype(data_.V17)();break;
#define _impl_adt_Cc17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_Cc16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:new(&data_.V17)decltype(data_.V17)(a.data_.V17);break;
#define _impl_adt_Mc17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_Mc16(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:new(&data_.V17)decltype(data_.V17)(std::move(a.data_.V17));break;
#define adt17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) class N{public:enum class kind{_impl_adt_K17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)};private:kind kind_;union data{_impl_adt_D17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}data_;public:class matcher{_impl_adt_MF17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)public:_impl_adt_MM17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}_impl_adt_M17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)void match(matcher const& m){switch(kind_){_impl_adt_MS17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}private:
#define _impl_adt_K18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_K17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)V18,
#define _impl_adt_D18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)_impl_adt_D17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)_impl_adt_real(T18)V18;
#define _impl_adt_MF18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_MF17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)std::function<void(T18)>V18##_;
#define _impl_adt_MM18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_MM17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)template<class T=T18>void call_##V18(_impl_adt_real(T18)a)const{_call_func(V18##_, a);}matcher& V18(std::function<void(T18)>f){V18##_=f;return *this;}
#define _impl_adt_M18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_M17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)template<class T=T18,class=std::enable_if_t<!std::is_void<T>::value>>static N V18(_impl_adt_real(T18)const& t){N ret(kind::V18);try{new(&ret.data_.V18)T(t);}catch(...){std::terminate();}return ret;}template<class T=T18,class=std::enable_if_t<!std::is_void<T>::value>>static N V18(_impl_adt_real(T18)&& t){N ret(kind::V18);try{new(&ret.data_.V18)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T18,class=std::enable_if_t<std::is_void<T>::value>>static N V18(){N ret(kind::V18);return ret;}
#define _impl_adt_MS18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_MS17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:m.call_##V18(data_.V18);break;
#define _impl_adt_Ds18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_Ds17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:data_.V18.~decltype(data_.V18)();break;
#define _impl_adt_Cc18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_Cc17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:new(&data_.V18)decltype(data_.V18)(a.data_.V18);break;
#define _impl_adt_Mc18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_Mc17(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:new(&data_.V18)decltype(data_.V18)(std::move(a.data_.V18));break;
#define adt18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) class N{public:enum class kind{_impl_adt_K18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)};private:kind kind_;union data{_impl_adt_D18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}data_;public:class matcher{_impl_adt_MF18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)public:_impl_adt_MM18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}_impl_adt_M18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)void match(matcher const& m){switch(kind_){_impl_adt_MS18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}private:
#define _impl_adt_K19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_K18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)V19,
#define _impl_adt_D19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)_impl_adt_D18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)_impl_adt_real(T19)V19;
#define _impl_adt_MF19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_MF18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)std::function<void(T19)>V19##_;
#define _impl_adt_MM19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_MM18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)template<class T=T19>void call_##V19(_impl_adt_real(T19)a)const{_call_func(V19##_, a);}matcher& V19(std::function<void(T19)>f){V19##_=f;return *this;}
#define _impl_adt_M19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_M18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)template<class T=T19,class=std::enable_if_t<!std::is_void<T>::value>>static N V19(_impl_adt_real(T19)const& t){N ret(kind::V19);try{new(&ret.data_.V19)T(t);}catch(...){std::terminate();}return ret;}template<class T=T19,class=std::enable_if_t<!std::is_void<T>::value>>static N V19(_impl_adt_real(T19)&& t){N ret(kind::V19);try{new(&ret.data_.V19)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T19,class=std::enable_if_t<std::is_void<T>::value>>static N V19(){N ret(kind::V19);return ret;}
#define _impl_adt_MS19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_MS18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:m.call_##V19(data_.V19);break;
#define _impl_adt_Ds19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_Ds18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:data_.V19.~decltype(data_.V19)();break;
#define _impl_adt_Cc19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_Cc18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:new(&data_.V19)decltype(data_.V19)(a.data_.V19);break;
#define _impl_adt_Mc19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_Mc18(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:new(&data_.V19)decltype(data_.V19)(std::move(a.data_.V19));break;
#define adt19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) class N{public:enum class kind{_impl_adt_K19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)};private:kind kind_;union data{_impl_adt_D19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}data_;public:class matcher{_impl_adt_MF19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)public:_impl_adt_MM19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}_impl_adt_M19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)void match(matcher const& m){switch(kind_){_impl_adt_MS19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}private:
#define _impl_adt_K1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_K19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)V1a,
#define _impl_adt_D1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)_impl_adt_D19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)_impl_adt_real(T1a)V1a;
#define _impl_adt_MF1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_MF19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)std::function<void(T1a)>V1a##_;
#define _impl_adt_MM1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_MM19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)template<class T=T1a>void call_##V1a(_impl_adt_real(T1a)a)const{_call_func(V1a##_, a);}matcher& V1a(std::function<void(T1a)>f){V1a##_=f;return *this;}
#define _impl_adt_M1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_M19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)template<class T=T1a,class=std::enable_if_t<!std::is_void<T>::value>>static N V1a(_impl_adt_real(T1a)const& t){N ret(kind::V1a);try{new(&ret.data_.V1a)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1a,class=std::enable_if_t<!std::is_void<T>::value>>static N V1a(_impl_adt_real(T1a)&& t){N ret(kind::V1a);try{new(&ret.data_.V1a)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1a,class=std::enable_if_t<std::is_void<T>::value>>static N V1a(){N ret(kind::V1a);return ret;}
#define _impl_adt_MS1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_MS19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:m.call_##V1a(data_.V1a);break;
#define _impl_adt_Ds1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_Ds19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:data_.V1a.~decltype(data_.V1a)();break;
#define _impl_adt_Cc1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_Cc19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:new(&data_.V1a)decltype(data_.V1a)(a.data_.V1a);break;
#define _impl_adt_Mc1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_Mc19(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:new(&data_.V1a)decltype(data_.V1a)(std::move(a.data_.V1a));break;
#define adt1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) class N{public:enum class kind{_impl_adt_K1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)};private:kind kind_;union data{_impl_adt_D1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}data_;public:class matcher{_impl_adt_MF1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)public:_impl_adt_MM1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}_impl_adt_M1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)void match(matcher const& m){switch(kind_){_impl_adt_MS1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}private:
#define _impl_adt_K1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_K1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)V1b,
#define _impl_adt_D1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)_impl_adt_D1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)_impl_adt_real(T1b)V1b;
#define _impl_adt_MF1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_MF1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)std::function<void(T1b)>V1b##_;
#define _impl_adt_MM1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_MM1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)template<class T=T1b>void call_##V1b(_impl_adt_real(T1b)a)const{_call_func(V1b##_, a);}matcher& V1b(std::function<void(T1b)>f){V1b##_=f;return *this;}
#define _impl_adt_M1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_M1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)template<class T=T1b,class=std::enable_if_t<!std::is_void<T>::value>>static N V1b(_impl_adt_real(T1b)const& t){N ret(kind::V1b);try{new(&ret.data_.V1b)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1b,class=std::enable_if_t<!std::is_void<T>::value>>static N V1b(_impl_adt_real(T1b)&& t){N ret(kind::V1b);try{new(&ret.data_.V1b)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1b,class=std::enable_if_t<std::is_void<T>::value>>static N V1b(){N ret(kind::V1b);return ret;}
#define _impl_adt_MS1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_MS1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:m.call_##V1b(data_.V1b);break;
#define _impl_adt_Ds1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_Ds1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:data_.V1b.~decltype(data_.V1b)();break;
#define _impl_adt_Cc1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_Cc1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:new(&data_.V1b)decltype(data_.V1b)(a.data_.V1b);break;
#define _impl_adt_Mc1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_Mc1a(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:new(&data_.V1b)decltype(data_.V1b)(std::move(a.data_.V1b));break;
#define adt1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) class N{public:enum class kind{_impl_adt_K1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)};private:kind kind_;union data{_impl_adt_D1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}data_;public:class matcher{_impl_adt_MF1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)public:_impl_adt_MM1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}_impl_adt_M1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)void match(matcher const& m){switch(kind_){_impl_adt_MS1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}private:
#define _impl_adt_K1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_K1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)V1c,
#define _impl_adt_D1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)_impl_adt_D1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)_impl_adt_real(T1c)V1c;
#define _impl_adt_MF1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_MF1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)std::function<void(T1c)>V1c##_;
#define _impl_adt_MM1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_MM1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)template<class T=T1c>void call_##V1c(_impl_adt_real(T1c)a)const{_call_func(V1c##_, a);}matcher& V1c(std::function<void(T1c)>f){V1c##_=f;return *this;}
#define _impl_adt_M1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_M1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)template<class T=T1c,class=std::enable_if_t<!std::is_void<T>::value>>static N V1c(_impl_adt_real(T1c)const& t){N ret(kind::V1c);try{new(&ret.data_.V1c)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1c,class=std::enable_if_t<!std::is_void<T>::value>>static N V1c(_impl_adt_real(T1c)&& t){N ret(kind::V1c);try{new(&ret.data_.V1c)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1c,class=std::enable_if_t<std::is_void<T>::value>>static N V1c(){N ret(kind::V1c);return ret;}
#define _impl_adt_MS1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_MS1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:m.call_##V1c(data_.V1c);break;
#define _impl_adt_Ds1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_Ds1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:data_.V1c.~decltype(data_.V1c)();break;
#define _impl_adt_Cc1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_Cc1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:new(&data_.V1c)decltype(data_.V1c)(a.data_.V1c);break;
#define _impl_adt_Mc1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_Mc1b(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:new(&data_.V1c)decltype(data_.V1c)(std::move(a.data_.V1c));break;
#define adt1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) class N{public:enum class kind{_impl_adt_K1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)};private:kind kind_;union data{_impl_adt_D1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}data_;public:class matcher{_impl_adt_MF1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)public:_impl_adt_MM1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}_impl_adt_M1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)void match(matcher const& m){switch(kind_){_impl_adt_MS1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}private:
#define _impl_adt_K1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_K1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)V1d,
#define _impl_adt_D1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)_impl_adt_D1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)_impl_adt_real(T1d)V1d;
#define _impl_adt_MF1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_MF1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)std::function<void(T1d)>V1d##_;
#define _impl_adt_MM1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_MM1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)template<class T=T1d>void call_##V1d(_impl_adt_real(T1d)a)const{_call_func(V1d##_, a);}matcher& V1d(std::function<void(T1d)>f){V1d##_=f;return *this;}
#define _impl_adt_M1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_M1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)template<class T=T1d,class=std::enable_if_t<!std::is_void<T>::value>>static N V1d(_impl_adt_real(T1d)const& t){N ret(kind::V1d);try{new(&ret.data_.V1d)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1d,class=std::enable_if_t<!std::is_void<T>::value>>static N V1d(_impl_adt_real(T1d)&& t){N ret(kind::V1d);try{new(&ret.data_.V1d)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1d,class=std::enable_if_t<std::is_void<T>::value>>static N V1d(){N ret(kind::V1d);return ret;}
#define _impl_adt_MS1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_MS1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:m.call_##V1d(data_.V1d);break;
#define _impl_adt_Ds1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_Ds1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:data_.V1d.~decltype(data_.V1d)();break;
#define _impl_adt_Cc1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_Cc1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:new(&data_.V1d)decltype(data_.V1d)(a.data_.V1d);break;
#define _impl_adt_Mc1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_Mc1c(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:new(&data_.V1d)decltype(data_.V1d)(std::move(a.data_.V1d));break;
#define adt1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) class N{public:enum class kind{_impl_adt_K1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)};private:kind kind_;union data{_impl_adt_D1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}data_;public:class matcher{_impl_adt_MF1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)public:_impl_adt_MM1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}_impl_adt_M1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)void match(matcher const& m){switch(kind_){_impl_adt_MS1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}private:
#define _impl_adt_K1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_K1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)V1e,
#define _impl_adt_D1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)_impl_adt_D1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)_impl_adt_real(T1e)V1e;
#define _impl_adt_MF1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_MF1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)std::function<void(T1e)>V1e##_;
#define _impl_adt_MM1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_MM1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)template<class T=T1e>void call_##V1e(_impl_adt_real(T1e)a)const{_call_func(V1e##_, a);}matcher& V1e(std::function<void(T1e)>f){V1e##_=f;return *this;}
#define _impl_adt_M1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_M1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)template<class T=T1e,class=std::enable_if_t<!std::is_void<T>::value>>static N V1e(_impl_adt_real(T1e)const& t){N ret(kind::V1e);try{new(&ret.data_.V1e)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1e,class=std::enable_if_t<!std::is_void<T>::value>>static N V1e(_impl_adt_real(T1e)&& t){N ret(kind::V1e);try{new(&ret.data_.V1e)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1e,class=std::enable_if_t<std::is_void<T>::value>>static N V1e(){N ret(kind::V1e);return ret;}
#define _impl_adt_MS1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_MS1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:m.call_##V1e(data_.V1e);break;
#define _impl_adt_Ds1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_Ds1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:data_.V1e.~decltype(data_.V1e)();break;
#define _impl_adt_Cc1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_Cc1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:new(&data_.V1e)decltype(data_.V1e)(a.data_.V1e);break;
#define _impl_adt_Mc1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_Mc1d(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:new(&data_.V1e)decltype(data_.V1e)(std::move(a.data_.V1e));break;
#define adt1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) class N{public:enum class kind{_impl_adt_K1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)};private:kind kind_;union data{_impl_adt_D1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}data_;public:class matcher{_impl_adt_MF1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)public:_impl_adt_MM1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}_impl_adt_M1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)void match(matcher const& m){switch(kind_){_impl_adt_MS1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}private:
#define _impl_adt_K1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_K1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)V1f,
#define _impl_adt_D1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)_impl_adt_D1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)_impl_adt_real(T1f)V1f;
#define _impl_adt_MF1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_MF1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)std::function<void(T1f)>V1f##_;
#define _impl_adt_MM1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_MM1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)template<class T=T1f>void call_##V1f(_impl_adt_real(T1f)a)const{_call_func(V1f##_, a);}matcher& V1f(std::function<void(T1f)>f){V1f##_=f;return *this;}
#define _impl_adt_M1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_M1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)template<class T=T1f,class=std::enable_if_t<!std::is_void<T>::value>>static N V1f(_impl_adt_real(T1f)const& t){N ret(kind::V1f);try{new(&ret.data_.V1f)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1f,class=std::enable_if_t<!std::is_void<T>::value>>static N V1f(_impl_adt_real(T1f)&& t){N ret(kind::V1f);try{new(&ret.data_.V1f)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1f,class=std::enable_if_t<std::is_void<T>::value>>static N V1f(){N ret(kind::V1f);return ret;}
#define _impl_adt_MS1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_MS1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:m.call_##V1f(data_.V1f);break;
#define _impl_adt_Ds1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_Ds1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:data_.V1f.~decltype(data_.V1f)();break;
#define _impl_adt_Cc1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_Cc1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:new(&data_.V1f)decltype(data_.V1f)(a.data_.V1f);break;
#define _impl_adt_Mc1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_Mc1e(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:new(&data_.V1f)decltype(data_.V1f)(std::move(a.data_.V1f));break;
#define adt1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) class N{public:enum class kind{_impl_adt_K1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)};private:kind kind_;union data{_impl_adt_D1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}data_;public:class matcher{_impl_adt_MF1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)public:_impl_adt_MM1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}_impl_adt_M1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)void match(matcher const& m){switch(kind_){_impl_adt_MS1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}private:
#define _impl_adt_K20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_K1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)V20,
#define _impl_adt_D20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)_impl_adt_D1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)_impl_adt_real(T20)V20;
#define _impl_adt_MF20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_MF1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)std::function<void(T20)>V20##_;
#define _impl_adt_MM20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_MM1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)template<class T=T20>void call_##V20(_impl_adt_real(T20)a)const{_call_func(V20##_, a);}matcher& V20(std::function<void(T20)>f){V20##_=f;return *this;}
#define _impl_adt_M20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_M1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)template<class T=T20,class=std::enable_if_t<!std::is_void<T>::value>>static N V20(_impl_adt_real(T20)const& t){N ret(kind::V20);try{new(&ret.data_.V20)T(t);}catch(...){std::terminate();}return ret;}template<class T=T20,class=std::enable_if_t<!std::is_void<T>::value>>static N V20(_impl_adt_real(T20)&& t){N ret(kind::V20);try{new(&ret.data_.V20)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T20,class=std::enable_if_t<std::is_void<T>::value>>static N V20(){N ret(kind::V20);return ret;}
#define _impl_adt_MS20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_MS1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:m.call_##V20(data_.V20);break;
#define _impl_adt_Ds20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_Ds1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:data_.V20.~decltype(data_.V20)();break;
#define _impl_adt_Cc20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_Cc1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:new(&data_.V20)decltype(data_.V20)(a.data_.V20);break;
#define _impl_adt_Mc20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_Mc1f(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:new(&data_.V20)decltype(data_.V20)(std::move(a.data_.V20));break;
#define adt20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) class N{public:enum class kind{_impl_adt_K20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)};private:kind kind_;union data{_impl_adt_D20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}data_;public:class matcher{_impl_adt_MF20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)public:_impl_adt_MM20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)};friend void swap(N& l, N& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}N(N const& a):N(a.kind_){switch(kind_){_impl_adt_Cc20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}N(N&& a):N(a.kind_){switch(kind_){_impl_adt_Mc20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}N& operator=(N o){swap(*this,o);return *this;}~N(){switch(kind_){_impl_adt_Ds20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}_impl_adt_M20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)void match(matcher const& m){switch(kind_){_impl_adt_MS20(N,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}private:
