#include <type_traits>
#include <cstdint>
#include <functional>
template<class... Ts> struct make_void{typedef void type;};
template<class... Ts> using void_t = typename make_void<Ts...>::type;
#define VARIANT_NARG__(...) VARIANT_NARG_I_(__VA_ARGS__, VARIANT_RSEQ_N())
#define VARIANT_NARG_I_(...) VARIANT_ARG_N(__VA_ARGS__)
#define VARIANT_ARG_N(NAME,_1,_2,_3,_4,_5,_6,_7,_8,_9,_a,_b,_c,_d,_e,_f,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_1a,_1b,_1c,_1d,_1e,_1f,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_2a,_2b,_2c,_2d,_2e,_2f,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_3a,_3b,_3c,_3d,_3e,_3f,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_4a,_4b,_4c,_4d,_4e,_4f,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_5a,_5b,_5c,_5d,_5e,_5f,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_6a,_6b,_6c,_6d,_6e,_6f,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_7a,_7b,_7c,_7d,_7e,_7f,_80,N, ...) N
#define VARIANT_RSEQ_N() 40,r,3f,r,3e,r,3d,r,3c,r,3b,r,3a,r,39,r,38,r,37,r,36,r,35,r,34,r,33,r,32,r,31,r,30,r,2f,r,2e,r,2d,r,2c,r,2b,r,2a,r,29,r,28,r,27,r,26,r,25,r,24,r,23,r,22,r,21,r,20,r,1f,r,1e,r,1d,r,1c,r,1b,r,1a,r,19,r,18,r,17,r,16,r,15,r,14,r,13,r,12,r,11,r,10,r,f,r,e,r,d,r,c,r,b,r,a,r,9,r,8,r,7,r,6,r,5,r,4,r,3,r,2,r,1,r
#define _VFUNC_(NAME, N) NAME##N
#define _VFUNC(NAME, N)  _VFUNC_(NAME, N)
#define VFUNC(FUNC, ...) _VFUNC(FUNC, VARIANT_NARG__(__VA_ARGS__)) (__VA_ARGS__)
#define end_adt() };
#define adt(NAME, ...) VFUNC(adt, NAME, __VA_ARGS__)
#define adtr(NAME, ...) static_assert(false, "Incorrect number of arguments to adt(" #NAME ", ...");
#define _impl_adt_real(T) std::conditional_t<std::is_void<T>::value, std::uint8_t, T>

#define _impl_adt_K1(NAME,V1,T1) V1,
#define _impl_adt_D1(NAME,V1,T1)data(){std::memset(reinterpret_cast<void*>(this),0,sizeof(*this));}~data(){}data(data const& d){std::memcpy(reinterpret_cast<void*>(this),reinterpret_cast<void const*>(&d), sizeof(*this));}data(data&& d){std::memcpy(reinterpret_cast<void*>(this),reinterpret_cast<void const*>(&d), sizeof(*this));}data& operator=(data const& d){new(this) data(d);return *this;}data& operator=(data&& d){new(this) data(d);return *this;}_impl_adt_real(T1)V1;
#define _impl_adt_MF1(NAME,V1,T1) static void _no_op(){}std::function<void()>default_=_no_op;std::function<void(T1)>V1##_;
#define _impl_adt_MM1(NAME,V1,T1) private:template<class t,class...args>static void _call_func(std::function<void(args...)>,t);template<class t>static void _call_func(std::function<void()>f,t){f();}template<class t>static void _call_func(std::function<void(t)>f,t g){f(g);}public:matcher(){}matcher const& _(std::function<void()>f){default_=f;return *this;}template<class T=T1>void call_##V1(_impl_adt_real(T1)a)const{_call_func(V1##_, a);}matcher& V1(std::function<void(T1)>f){V1##_=f;return *this;}
#define _impl_adt_M1(NAME,V1,T1) private:NAME(kind k):kind_(k){}public:template<class T=T1,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1(_impl_adt_real(T1)const& t){NAME ret(kind::V1);try{new(&ret.data_.V1)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1(_impl_adt_real(T1)&& t){NAME ret(kind::V1);try{new(&ret.data_.V1)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1,class=std::enable_if_t<std::is_void<T>::value>>static NAME V1(){NAME ret(kind::V1);return ret;}
#define _impl_adt_MS1(NAME,V1,T1) case kind::V1:m.call_##V1(data_.V1);break;
#define _impl_adt_Ds1(NAME,V1,T1) case kind::V1:data_.V1.~decltype(data_.V1)();break;
#define _impl_adt_Cc1(NAME,V1,T1) case kind::V1:new(&data_.V1)decltype(data_.V1)(a.data_.V1);break;
#define _impl_adt_Mc1(NAME,V1,T1) case kind::V1:new(&data_.V1)decltype(data_.V1)(std::move(a.data_.V1));break;
#define adt1(NAME,V1,T1) class NAME {public:enum class kind{_impl_adt_K1(NAME,V1,T1)};private:kind kind_;union data{_impl_adt_D1(NAME,V1,T1)}data_;public:class matcher{_impl_adt_MF1(NAME,V1,T1)public:_impl_adt_MM1(NAME,V1,T1)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc1(NAME,V1,T1)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc1(NAME,V1,T1)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds1(NAME,V1,T1)}}_impl_adt_M1(NAME,V1,T1)void match(matcher const& m){switch(kind_){_impl_adt_MS1(NAME,V1,T1)}}private:
#define _impl_adt_K2(NAME,V1,T1,V2,T2) _impl_adt_K1(NAME,V1,T1)V2,
#define _impl_adt_D2(NAME,V1,T1,V2,T2)_impl_adt_D1(NAME,V1,T1)_impl_adt_real(T2)V2;
#define _impl_adt_MF2(NAME,V1,T1,V2,T2) _impl_adt_MF1(NAME,V1,T1)std::function<void(T2)>V2##_;
#define _impl_adt_MM2(NAME,V1,T1,V2,T2) _impl_adt_MM1(NAME,V1,T1)template<class T=T2>void call_##V2(_impl_adt_real(T2)a)const{_call_func(V2##_, a);}matcher& V2(std::function<void(T2)>f){V2##_=f;return *this;}
#define _impl_adt_M2(NAME,V1,T1,V2,T2) _impl_adt_M1(NAME,V1,T1)template<class T=T2,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2(_impl_adt_real(T2)const& t){NAME ret(kind::V2);try{new(&ret.data_.V2)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2(_impl_adt_real(T2)&& t){NAME ret(kind::V2);try{new(&ret.data_.V2)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2,class=std::enable_if_t<std::is_void<T>::value>>static NAME V2(){NAME ret(kind::V2);return ret;}
#define _impl_adt_MS2(NAME,V1,T1,V2,T2) _impl_adt_MS1(NAME,V1,T1)case kind::V2:m.call_##V2(data_.V2);break;
#define _impl_adt_Ds2(NAME,V1,T1,V2,T2) _impl_adt_Ds1(NAME,V1,T1)case kind::V2:data_.V2.~decltype(data_.V2)();break;
#define _impl_adt_Cc2(NAME,V1,T1,V2,T2) _impl_adt_Cc1(NAME,V1,T1)case kind::V2:new(&data_.V2)decltype(data_.V2)(a.data_.V2);break;
#define _impl_adt_Mc2(NAME,V1,T1,V2,T2) _impl_adt_Mc1(NAME,V1,T1)case kind::V2:new(&data_.V2)decltype(data_.V2)(std::move(a.data_.V2));break;
#define adt2(NAME,V1,T1,V2,T2) class NAME {public:enum class kind{_impl_adt_K2(NAME,V1,T1,V2,T2)};private:kind kind_;union data{_impl_adt_D2(NAME,V1,T1,V2,T2)}data_;public:class matcher{_impl_adt_MF2(NAME,V1,T1,V2,T2)public:_impl_adt_MM2(NAME,V1,T1,V2,T2)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc2(NAME,V1,T1,V2,T2)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc2(NAME,V1,T1,V2,T2)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds2(NAME,V1,T1,V2,T2)}}_impl_adt_M2(NAME,V1,T1,V2,T2)void match(matcher const& m){switch(kind_){_impl_adt_MS2(NAME,V1,T1,V2,T2)}}private:
#define _impl_adt_K3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_K2(NAME,V1,T1,V2,T2)V3,
#define _impl_adt_D3(NAME,V1,T1,V2,T2,V3,T3)_impl_adt_D2(NAME,V1,T1,V2,T2)_impl_adt_real(T3)V3;
#define _impl_adt_MF3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_MF2(NAME,V1,T1,V2,T2)std::function<void(T3)>V3##_;
#define _impl_adt_MM3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_MM2(NAME,V1,T1,V2,T2)template<class T=T3>void call_##V3(_impl_adt_real(T3)a)const{_call_func(V3##_, a);}matcher& V3(std::function<void(T3)>f){V3##_=f;return *this;}
#define _impl_adt_M3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_M2(NAME,V1,T1,V2,T2)template<class T=T3,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3(_impl_adt_real(T3)const& t){NAME ret(kind::V3);try{new(&ret.data_.V3)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3(_impl_adt_real(T3)&& t){NAME ret(kind::V3);try{new(&ret.data_.V3)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3,class=std::enable_if_t<std::is_void<T>::value>>static NAME V3(){NAME ret(kind::V3);return ret;}
#define _impl_adt_MS3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_MS2(NAME,V1,T1,V2,T2)case kind::V3:m.call_##V3(data_.V3);break;
#define _impl_adt_Ds3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_Ds2(NAME,V1,T1,V2,T2)case kind::V3:data_.V3.~decltype(data_.V3)();break;
#define _impl_adt_Cc3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_Cc2(NAME,V1,T1,V2,T2)case kind::V3:new(&data_.V3)decltype(data_.V3)(a.data_.V3);break;
#define _impl_adt_Mc3(NAME,V1,T1,V2,T2,V3,T3) _impl_adt_Mc2(NAME,V1,T1,V2,T2)case kind::V3:new(&data_.V3)decltype(data_.V3)(std::move(a.data_.V3));break;
#define adt3(NAME,V1,T1,V2,T2,V3,T3) class NAME {public:enum class kind{_impl_adt_K3(NAME,V1,T1,V2,T2,V3,T3)};private:kind kind_;union data{_impl_adt_D3(NAME,V1,T1,V2,T2,V3,T3)}data_;public:class matcher{_impl_adt_MF3(NAME,V1,T1,V2,T2,V3,T3)public:_impl_adt_MM3(NAME,V1,T1,V2,T2,V3,T3)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc3(NAME,V1,T1,V2,T2,V3,T3)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc3(NAME,V1,T1,V2,T2,V3,T3)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds3(NAME,V1,T1,V2,T2,V3,T3)}}_impl_adt_M3(NAME,V1,T1,V2,T2,V3,T3)void match(matcher const& m){switch(kind_){_impl_adt_MS3(NAME,V1,T1,V2,T2,V3,T3)}}private:
#define _impl_adt_K4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_K3(NAME,V1,T1,V2,T2,V3,T3)V4,
#define _impl_adt_D4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)_impl_adt_D3(NAME,V1,T1,V2,T2,V3,T3)_impl_adt_real(T4)V4;
#define _impl_adt_MF4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_MF3(NAME,V1,T1,V2,T2,V3,T3)std::function<void(T4)>V4##_;
#define _impl_adt_MM4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_MM3(NAME,V1,T1,V2,T2,V3,T3)template<class T=T4>void call_##V4(_impl_adt_real(T4)a)const{_call_func(V4##_, a);}matcher& V4(std::function<void(T4)>f){V4##_=f;return *this;}
#define _impl_adt_M4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_M3(NAME,V1,T1,V2,T2,V3,T3)template<class T=T4,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V4(_impl_adt_real(T4)const& t){NAME ret(kind::V4);try{new(&ret.data_.V4)T(t);}catch(...){std::terminate();}return ret;}template<class T=T4,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V4(_impl_adt_real(T4)&& t){NAME ret(kind::V4);try{new(&ret.data_.V4)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T4,class=std::enable_if_t<std::is_void<T>::value>>static NAME V4(){NAME ret(kind::V4);return ret;}
#define _impl_adt_MS4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_MS3(NAME,V1,T1,V2,T2,V3,T3)case kind::V4:m.call_##V4(data_.V4);break;
#define _impl_adt_Ds4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_Ds3(NAME,V1,T1,V2,T2,V3,T3)case kind::V4:data_.V4.~decltype(data_.V4)();break;
#define _impl_adt_Cc4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_Cc3(NAME,V1,T1,V2,T2,V3,T3)case kind::V4:new(&data_.V4)decltype(data_.V4)(a.data_.V4);break;
#define _impl_adt_Mc4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) _impl_adt_Mc3(NAME,V1,T1,V2,T2,V3,T3)case kind::V4:new(&data_.V4)decltype(data_.V4)(std::move(a.data_.V4));break;
#define adt4(NAME,V1,T1,V2,T2,V3,T3,V4,T4) class NAME {public:enum class kind{_impl_adt_K4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)};private:kind kind_;union data{_impl_adt_D4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)}data_;public:class matcher{_impl_adt_MF4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)public:_impl_adt_MM4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)}}_impl_adt_M4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)void match(matcher const& m){switch(kind_){_impl_adt_MS4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)}}private:
#define _impl_adt_K5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_K4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)V5,
#define _impl_adt_D5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)_impl_adt_D4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)_impl_adt_real(T5)V5;
#define _impl_adt_MF5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_MF4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)std::function<void(T5)>V5##_;
#define _impl_adt_MM5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_MM4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)template<class T=T5>void call_##V5(_impl_adt_real(T5)a)const{_call_func(V5##_, a);}matcher& V5(std::function<void(T5)>f){V5##_=f;return *this;}
#define _impl_adt_M5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_M4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)template<class T=T5,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V5(_impl_adt_real(T5)const& t){NAME ret(kind::V5);try{new(&ret.data_.V5)T(t);}catch(...){std::terminate();}return ret;}template<class T=T5,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V5(_impl_adt_real(T5)&& t){NAME ret(kind::V5);try{new(&ret.data_.V5)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T5,class=std::enable_if_t<std::is_void<T>::value>>static NAME V5(){NAME ret(kind::V5);return ret;}
#define _impl_adt_MS5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_MS4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:m.call_##V5(data_.V5);break;
#define _impl_adt_Ds5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_Ds4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:data_.V5.~decltype(data_.V5)();break;
#define _impl_adt_Cc5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_Cc4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:new(&data_.V5)decltype(data_.V5)(a.data_.V5);break;
#define _impl_adt_Mc5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) _impl_adt_Mc4(NAME,V1,T1,V2,T2,V3,T3,V4,T4)case kind::V5:new(&data_.V5)decltype(data_.V5)(std::move(a.data_.V5));break;
#define adt5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5) class NAME {public:enum class kind{_impl_adt_K5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)};private:kind kind_;union data{_impl_adt_D5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}data_;public:class matcher{_impl_adt_MF5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)public:_impl_adt_MM5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}_impl_adt_M5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)void match(matcher const& m){switch(kind_){_impl_adt_MS5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)}}private:
#define _impl_adt_K6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_K5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)V6,
#define _impl_adt_D6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)_impl_adt_D5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)_impl_adt_real(T6)V6;
#define _impl_adt_MF6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_MF5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)std::function<void(T6)>V6##_;
#define _impl_adt_MM6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_MM5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)template<class T=T6>void call_##V6(_impl_adt_real(T6)a)const{_call_func(V6##_, a);}matcher& V6(std::function<void(T6)>f){V6##_=f;return *this;}
#define _impl_adt_M6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_M5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)template<class T=T6,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V6(_impl_adt_real(T6)const& t){NAME ret(kind::V6);try{new(&ret.data_.V6)T(t);}catch(...){std::terminate();}return ret;}template<class T=T6,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V6(_impl_adt_real(T6)&& t){NAME ret(kind::V6);try{new(&ret.data_.V6)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T6,class=std::enable_if_t<std::is_void<T>::value>>static NAME V6(){NAME ret(kind::V6);return ret;}
#define _impl_adt_MS6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_MS5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:m.call_##V6(data_.V6);break;
#define _impl_adt_Ds6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_Ds5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:data_.V6.~decltype(data_.V6)();break;
#define _impl_adt_Cc6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_Cc5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:new(&data_.V6)decltype(data_.V6)(a.data_.V6);break;
#define _impl_adt_Mc6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) _impl_adt_Mc5(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5)case kind::V6:new(&data_.V6)decltype(data_.V6)(std::move(a.data_.V6));break;
#define adt6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6) class NAME {public:enum class kind{_impl_adt_K6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)};private:kind kind_;union data{_impl_adt_D6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}data_;public:class matcher{_impl_adt_MF6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)public:_impl_adt_MM6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}_impl_adt_M6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)void match(matcher const& m){switch(kind_){_impl_adt_MS6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)}}private:
#define _impl_adt_K7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_K6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)V7,
#define _impl_adt_D7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)_impl_adt_D6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)_impl_adt_real(T7)V7;
#define _impl_adt_MF7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_MF6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)std::function<void(T7)>V7##_;
#define _impl_adt_MM7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_MM6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)template<class T=T7>void call_##V7(_impl_adt_real(T7)a)const{_call_func(V7##_, a);}matcher& V7(std::function<void(T7)>f){V7##_=f;return *this;}
#define _impl_adt_M7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_M6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)template<class T=T7,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V7(_impl_adt_real(T7)const& t){NAME ret(kind::V7);try{new(&ret.data_.V7)T(t);}catch(...){std::terminate();}return ret;}template<class T=T7,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V7(_impl_adt_real(T7)&& t){NAME ret(kind::V7);try{new(&ret.data_.V7)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T7,class=std::enable_if_t<std::is_void<T>::value>>static NAME V7(){NAME ret(kind::V7);return ret;}
#define _impl_adt_MS7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_MS6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:m.call_##V7(data_.V7);break;
#define _impl_adt_Ds7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_Ds6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:data_.V7.~decltype(data_.V7)();break;
#define _impl_adt_Cc7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_Cc6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:new(&data_.V7)decltype(data_.V7)(a.data_.V7);break;
#define _impl_adt_Mc7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) _impl_adt_Mc6(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6)case kind::V7:new(&data_.V7)decltype(data_.V7)(std::move(a.data_.V7));break;
#define adt7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7) class NAME {public:enum class kind{_impl_adt_K7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)};private:kind kind_;union data{_impl_adt_D7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}data_;public:class matcher{_impl_adt_MF7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)public:_impl_adt_MM7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}_impl_adt_M7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)void match(matcher const& m){switch(kind_){_impl_adt_MS7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)}}private:
#define _impl_adt_K8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_K7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)V8,
#define _impl_adt_D8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)_impl_adt_D7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)_impl_adt_real(T8)V8;
#define _impl_adt_MF8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_MF7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)std::function<void(T8)>V8##_;
#define _impl_adt_MM8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_MM7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)template<class T=T8>void call_##V8(_impl_adt_real(T8)a)const{_call_func(V8##_, a);}matcher& V8(std::function<void(T8)>f){V8##_=f;return *this;}
#define _impl_adt_M8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_M7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)template<class T=T8,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V8(_impl_adt_real(T8)const& t){NAME ret(kind::V8);try{new(&ret.data_.V8)T(t);}catch(...){std::terminate();}return ret;}template<class T=T8,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V8(_impl_adt_real(T8)&& t){NAME ret(kind::V8);try{new(&ret.data_.V8)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T8,class=std::enable_if_t<std::is_void<T>::value>>static NAME V8(){NAME ret(kind::V8);return ret;}
#define _impl_adt_MS8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_MS7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:m.call_##V8(data_.V8);break;
#define _impl_adt_Ds8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_Ds7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:data_.V8.~decltype(data_.V8)();break;
#define _impl_adt_Cc8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_Cc7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:new(&data_.V8)decltype(data_.V8)(a.data_.V8);break;
#define _impl_adt_Mc8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) _impl_adt_Mc7(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7)case kind::V8:new(&data_.V8)decltype(data_.V8)(std::move(a.data_.V8));break;
#define adt8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8) class NAME {public:enum class kind{_impl_adt_K8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)};private:kind kind_;union data{_impl_adt_D8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}data_;public:class matcher{_impl_adt_MF8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)public:_impl_adt_MM8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}_impl_adt_M8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)void match(matcher const& m){switch(kind_){_impl_adt_MS8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)}}private:
#define _impl_adt_K9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_K8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)V9,
#define _impl_adt_D9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)_impl_adt_D8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)_impl_adt_real(T9)V9;
#define _impl_adt_MF9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_MF8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)std::function<void(T9)>V9##_;
#define _impl_adt_MM9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_MM8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)template<class T=T9>void call_##V9(_impl_adt_real(T9)a)const{_call_func(V9##_, a);}matcher& V9(std::function<void(T9)>f){V9##_=f;return *this;}
#define _impl_adt_M9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_M8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)template<class T=T9,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V9(_impl_adt_real(T9)const& t){NAME ret(kind::V9);try{new(&ret.data_.V9)T(t);}catch(...){std::terminate();}return ret;}template<class T=T9,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V9(_impl_adt_real(T9)&& t){NAME ret(kind::V9);try{new(&ret.data_.V9)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T9,class=std::enable_if_t<std::is_void<T>::value>>static NAME V9(){NAME ret(kind::V9);return ret;}
#define _impl_adt_MS9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_MS8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:m.call_##V9(data_.V9);break;
#define _impl_adt_Ds9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_Ds8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:data_.V9.~decltype(data_.V9)();break;
#define _impl_adt_Cc9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_Cc8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:new(&data_.V9)decltype(data_.V9)(a.data_.V9);break;
#define _impl_adt_Mc9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) _impl_adt_Mc8(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8)case kind::V9:new(&data_.V9)decltype(data_.V9)(std::move(a.data_.V9));break;
#define adt9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9) class NAME {public:enum class kind{_impl_adt_K9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)};private:kind kind_;union data{_impl_adt_D9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}data_;public:class matcher{_impl_adt_MF9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)public:_impl_adt_MM9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}_impl_adt_M9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)void match(matcher const& m){switch(kind_){_impl_adt_MS9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)}}private:
#define _impl_adt_Ka(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_K9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)Va,
#define _impl_adt_Da(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)_impl_adt_D9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)_impl_adt_real(Ta)Va;
#define _impl_adt_MFa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_MF9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)std::function<void(Ta)>Va##_;
#define _impl_adt_MMa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_MM9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)template<class T=Ta>void call_##Va(_impl_adt_real(Ta)a)const{_call_func(Va##_, a);}matcher& Va(std::function<void(Ta)>f){Va##_=f;return *this;}
#define _impl_adt_Ma(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_M9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)template<class T=Ta,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Va(_impl_adt_real(Ta)const& t){NAME ret(kind::Va);try{new(&ret.data_.Va)T(t);}catch(...){std::terminate();}return ret;}template<class T=Ta,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Va(_impl_adt_real(Ta)&& t){NAME ret(kind::Va);try{new(&ret.data_.Va)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Ta,class=std::enable_if_t<std::is_void<T>::value>>static NAME Va(){NAME ret(kind::Va);return ret;}
#define _impl_adt_MSa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_MS9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:m.call_##Va(data_.Va);break;
#define _impl_adt_Dsa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_Ds9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:data_.Va.~decltype(data_.Va)();break;
#define _impl_adt_Cca(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_Cc9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:new(&data_.Va)decltype(data_.Va)(a.data_.Va);break;
#define _impl_adt_Mca(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) _impl_adt_Mc9(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9)case kind::Va:new(&data_.Va)decltype(data_.Va)(std::move(a.data_.Va));break;
#define adta(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta) class NAME {public:enum class kind{_impl_adt_Ka(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)};private:kind kind_;union data{_impl_adt_Da(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}data_;public:class matcher{_impl_adt_MFa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)public:_impl_adt_MMa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cca(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mca(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Dsa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}_impl_adt_Ma(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)void match(matcher const& m){switch(kind_){_impl_adt_MSa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)}}private:
#define _impl_adt_Kb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Ka(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)Vb,
#define _impl_adt_Db(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)_impl_adt_Da(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)_impl_adt_real(Tb)Vb;
#define _impl_adt_MFb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_MFa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)std::function<void(Tb)>Vb##_;
#define _impl_adt_MMb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_MMa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)template<class T=Tb>void call_##Vb(_impl_adt_real(Tb)a)const{_call_func(Vb##_, a);}matcher& Vb(std::function<void(Tb)>f){Vb##_=f;return *this;}
#define _impl_adt_Mb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Ma(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)template<class T=Tb,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vb(_impl_adt_real(Tb)const& t){NAME ret(kind::Vb);try{new(&ret.data_.Vb)T(t);}catch(...){std::terminate();}return ret;}template<class T=Tb,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vb(_impl_adt_real(Tb)&& t){NAME ret(kind::Vb);try{new(&ret.data_.Vb)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Tb,class=std::enable_if_t<std::is_void<T>::value>>static NAME Vb(){NAME ret(kind::Vb);return ret;}
#define _impl_adt_MSb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_MSa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:m.call_##Vb(data_.Vb);break;
#define _impl_adt_Dsb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Dsa(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:data_.Vb.~decltype(data_.Vb)();break;
#define _impl_adt_Ccb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Cca(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:new(&data_.Vb)decltype(data_.Vb)(a.data_.Vb);break;
#define _impl_adt_Mcb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) _impl_adt_Mca(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta)case kind::Vb:new(&data_.Vb)decltype(data_.Vb)(std::move(a.data_.Vb));break;
#define adtb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb) class NAME {public:enum class kind{_impl_adt_Kb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)};private:kind kind_;union data{_impl_adt_Db(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}data_;public:class matcher{_impl_adt_MFb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)public:_impl_adt_MMb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Ccb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mcb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Dsb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}_impl_adt_Mb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)void match(matcher const& m){switch(kind_){_impl_adt_MSb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)}}private:
#define _impl_adt_Kc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Kb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)Vc,
#define _impl_adt_Dc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)_impl_adt_Db(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)_impl_adt_real(Tc)Vc;
#define _impl_adt_MFc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_MFb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)std::function<void(Tc)>Vc##_;
#define _impl_adt_MMc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_MMb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)template<class T=Tc>void call_##Vc(_impl_adt_real(Tc)a)const{_call_func(Vc##_, a);}matcher& Vc(std::function<void(Tc)>f){Vc##_=f;return *this;}
#define _impl_adt_Mc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Mb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)template<class T=Tc,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vc(_impl_adt_real(Tc)const& t){NAME ret(kind::Vc);try{new(&ret.data_.Vc)T(t);}catch(...){std::terminate();}return ret;}template<class T=Tc,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vc(_impl_adt_real(Tc)&& t){NAME ret(kind::Vc);try{new(&ret.data_.Vc)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Tc,class=std::enable_if_t<std::is_void<T>::value>>static NAME Vc(){NAME ret(kind::Vc);return ret;}
#define _impl_adt_MSc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_MSb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:m.call_##Vc(data_.Vc);break;
#define _impl_adt_Dsc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Dsb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:data_.Vc.~decltype(data_.Vc)();break;
#define _impl_adt_Ccc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Ccb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:new(&data_.Vc)decltype(data_.Vc)(a.data_.Vc);break;
#define _impl_adt_Mcc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) _impl_adt_Mcb(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb)case kind::Vc:new(&data_.Vc)decltype(data_.Vc)(std::move(a.data_.Vc));break;
#define adtc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc) class NAME {public:enum class kind{_impl_adt_Kc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)};private:kind kind_;union data{_impl_adt_Dc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}data_;public:class matcher{_impl_adt_MFc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)public:_impl_adt_MMc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Ccc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mcc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Dsc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}_impl_adt_Mc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)void match(matcher const& m){switch(kind_){_impl_adt_MSc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)}}private:
#define _impl_adt_Kd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Kc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)Vd,
#define _impl_adt_Dd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)_impl_adt_Dc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)_impl_adt_real(Td)Vd;
#define _impl_adt_MFd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_MFc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)std::function<void(Td)>Vd##_;
#define _impl_adt_MMd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_MMc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)template<class T=Td>void call_##Vd(_impl_adt_real(Td)a)const{_call_func(Vd##_, a);}matcher& Vd(std::function<void(Td)>f){Vd##_=f;return *this;}
#define _impl_adt_Md(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Mc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)template<class T=Td,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vd(_impl_adt_real(Td)const& t){NAME ret(kind::Vd);try{new(&ret.data_.Vd)T(t);}catch(...){std::terminate();}return ret;}template<class T=Td,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vd(_impl_adt_real(Td)&& t){NAME ret(kind::Vd);try{new(&ret.data_.Vd)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Td,class=std::enable_if_t<std::is_void<T>::value>>static NAME Vd(){NAME ret(kind::Vd);return ret;}
#define _impl_adt_MSd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_MSc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:m.call_##Vd(data_.Vd);break;
#define _impl_adt_Dsd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Dsc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:data_.Vd.~decltype(data_.Vd)();break;
#define _impl_adt_Ccd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Ccc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:new(&data_.Vd)decltype(data_.Vd)(a.data_.Vd);break;
#define _impl_adt_Mcd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) _impl_adt_Mcc(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc)case kind::Vd:new(&data_.Vd)decltype(data_.Vd)(std::move(a.data_.Vd));break;
#define adtd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td) class NAME {public:enum class kind{_impl_adt_Kd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)};private:kind kind_;union data{_impl_adt_Dd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}data_;public:class matcher{_impl_adt_MFd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)public:_impl_adt_MMd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Ccd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mcd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Dsd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}_impl_adt_Md(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)void match(matcher const& m){switch(kind_){_impl_adt_MSd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)}}private:
#define _impl_adt_Ke(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Kd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)Ve,
#define _impl_adt_De(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)_impl_adt_Dd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)_impl_adt_real(Te)Ve;
#define _impl_adt_MFe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_MFd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)std::function<void(Te)>Ve##_;
#define _impl_adt_MMe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_MMd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)template<class T=Te>void call_##Ve(_impl_adt_real(Te)a)const{_call_func(Ve##_, a);}matcher& Ve(std::function<void(Te)>f){Ve##_=f;return *this;}
#define _impl_adt_Me(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Md(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)template<class T=Te,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Ve(_impl_adt_real(Te)const& t){NAME ret(kind::Ve);try{new(&ret.data_.Ve)T(t);}catch(...){std::terminate();}return ret;}template<class T=Te,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Ve(_impl_adt_real(Te)&& t){NAME ret(kind::Ve);try{new(&ret.data_.Ve)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Te,class=std::enable_if_t<std::is_void<T>::value>>static NAME Ve(){NAME ret(kind::Ve);return ret;}
#define _impl_adt_MSe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_MSd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:m.call_##Ve(data_.Ve);break;
#define _impl_adt_Dse(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Dsd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:data_.Ve.~decltype(data_.Ve)();break;
#define _impl_adt_Cce(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Ccd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:new(&data_.Ve)decltype(data_.Ve)(a.data_.Ve);break;
#define _impl_adt_Mce(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) _impl_adt_Mcd(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td)case kind::Ve:new(&data_.Ve)decltype(data_.Ve)(std::move(a.data_.Ve));break;
#define adte(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te) class NAME {public:enum class kind{_impl_adt_Ke(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)};private:kind kind_;union data{_impl_adt_De(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}data_;public:class matcher{_impl_adt_MFe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)public:_impl_adt_MMe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cce(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mce(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Dse(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}_impl_adt_Me(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)void match(matcher const& m){switch(kind_){_impl_adt_MSe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)}}private:
#define _impl_adt_Kf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Ke(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)Vf,
#define _impl_adt_Df(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)_impl_adt_De(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)_impl_adt_real(Tf)Vf;
#define _impl_adt_MFf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_MFe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)std::function<void(Tf)>Vf##_;
#define _impl_adt_MMf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_MMe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)template<class T=Tf>void call_##Vf(_impl_adt_real(Tf)a)const{_call_func(Vf##_, a);}matcher& Vf(std::function<void(Tf)>f){Vf##_=f;return *this;}
#define _impl_adt_Mf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Me(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)template<class T=Tf,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vf(_impl_adt_real(Tf)const& t){NAME ret(kind::Vf);try{new(&ret.data_.Vf)T(t);}catch(...){std::terminate();}return ret;}template<class T=Tf,class=std::enable_if_t<!std::is_void<T>::value>>static NAME Vf(_impl_adt_real(Tf)&& t){NAME ret(kind::Vf);try{new(&ret.data_.Vf)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=Tf,class=std::enable_if_t<std::is_void<T>::value>>static NAME Vf(){NAME ret(kind::Vf);return ret;}
#define _impl_adt_MSf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_MSe(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:m.call_##Vf(data_.Vf);break;
#define _impl_adt_Dsf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Dse(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:data_.Vf.~decltype(data_.Vf)();break;
#define _impl_adt_Ccf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Cce(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:new(&data_.Vf)decltype(data_.Vf)(a.data_.Vf);break;
#define _impl_adt_Mcf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) _impl_adt_Mce(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te)case kind::Vf:new(&data_.Vf)decltype(data_.Vf)(std::move(a.data_.Vf));break;
#define adtf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf) class NAME {public:enum class kind{_impl_adt_Kf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)};private:kind kind_;union data{_impl_adt_Df(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}data_;public:class matcher{_impl_adt_MFf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)public:_impl_adt_MMf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Ccf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mcf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Dsf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}_impl_adt_Mf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)void match(matcher const& m){switch(kind_){_impl_adt_MSf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)}}private:
#define _impl_adt_K10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Kf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)V10,
#define _impl_adt_D10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)_impl_adt_Df(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)_impl_adt_real(T10)V10;
#define _impl_adt_MF10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_MFf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)std::function<void(T10)>V10##_;
#define _impl_adt_MM10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_MMf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)template<class T=T10>void call_##V10(_impl_adt_real(T10)a)const{_call_func(V10##_, a);}matcher& V10(std::function<void(T10)>f){V10##_=f;return *this;}
#define _impl_adt_M10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Mf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)template<class T=T10,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V10(_impl_adt_real(T10)const& t){NAME ret(kind::V10);try{new(&ret.data_.V10)T(t);}catch(...){std::terminate();}return ret;}template<class T=T10,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V10(_impl_adt_real(T10)&& t){NAME ret(kind::V10);try{new(&ret.data_.V10)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T10,class=std::enable_if_t<std::is_void<T>::value>>static NAME V10(){NAME ret(kind::V10);return ret;}
#define _impl_adt_MS10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_MSf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:m.call_##V10(data_.V10);break;
#define _impl_adt_Ds10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Dsf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:data_.V10.~decltype(data_.V10)();break;
#define _impl_adt_Cc10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Ccf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:new(&data_.V10)decltype(data_.V10)(a.data_.V10);break;
#define _impl_adt_Mc10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) _impl_adt_Mcf(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf)case kind::V10:new(&data_.V10)decltype(data_.V10)(std::move(a.data_.V10));break;
#define adt10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10) class NAME {public:enum class kind{_impl_adt_K10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)};private:kind kind_;union data{_impl_adt_D10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}data_;public:class matcher{_impl_adt_MF10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)public:_impl_adt_MM10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}_impl_adt_M10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)void match(matcher const& m){switch(kind_){_impl_adt_MS10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)}}private:
#define _impl_adt_K11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_K10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)V11,
#define _impl_adt_D11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)_impl_adt_D10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)_impl_adt_real(T11)V11;
#define _impl_adt_MF11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_MF10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)std::function<void(T11)>V11##_;
#define _impl_adt_MM11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_MM10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)template<class T=T11>void call_##V11(_impl_adt_real(T11)a)const{_call_func(V11##_, a);}matcher& V11(std::function<void(T11)>f){V11##_=f;return *this;}
#define _impl_adt_M11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_M10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)template<class T=T11,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V11(_impl_adt_real(T11)const& t){NAME ret(kind::V11);try{new(&ret.data_.V11)T(t);}catch(...){std::terminate();}return ret;}template<class T=T11,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V11(_impl_adt_real(T11)&& t){NAME ret(kind::V11);try{new(&ret.data_.V11)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T11,class=std::enable_if_t<std::is_void<T>::value>>static NAME V11(){NAME ret(kind::V11);return ret;}
#define _impl_adt_MS11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_MS10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:m.call_##V11(data_.V11);break;
#define _impl_adt_Ds11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_Ds10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:data_.V11.~decltype(data_.V11)();break;
#define _impl_adt_Cc11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_Cc10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:new(&data_.V11)decltype(data_.V11)(a.data_.V11);break;
#define _impl_adt_Mc11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) _impl_adt_Mc10(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10)case kind::V11:new(&data_.V11)decltype(data_.V11)(std::move(a.data_.V11));break;
#define adt11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11) class NAME {public:enum class kind{_impl_adt_K11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)};private:kind kind_;union data{_impl_adt_D11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}data_;public:class matcher{_impl_adt_MF11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)public:_impl_adt_MM11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}_impl_adt_M11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)void match(matcher const& m){switch(kind_){_impl_adt_MS11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)}}private:
#define _impl_adt_K12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_K11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)V12,
#define _impl_adt_D12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)_impl_adt_D11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)_impl_adt_real(T12)V12;
#define _impl_adt_MF12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_MF11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)std::function<void(T12)>V12##_;
#define _impl_adt_MM12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_MM11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)template<class T=T12>void call_##V12(_impl_adt_real(T12)a)const{_call_func(V12##_, a);}matcher& V12(std::function<void(T12)>f){V12##_=f;return *this;}
#define _impl_adt_M12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_M11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)template<class T=T12,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V12(_impl_adt_real(T12)const& t){NAME ret(kind::V12);try{new(&ret.data_.V12)T(t);}catch(...){std::terminate();}return ret;}template<class T=T12,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V12(_impl_adt_real(T12)&& t){NAME ret(kind::V12);try{new(&ret.data_.V12)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T12,class=std::enable_if_t<std::is_void<T>::value>>static NAME V12(){NAME ret(kind::V12);return ret;}
#define _impl_adt_MS12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_MS11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:m.call_##V12(data_.V12);break;
#define _impl_adt_Ds12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_Ds11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:data_.V12.~decltype(data_.V12)();break;
#define _impl_adt_Cc12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_Cc11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:new(&data_.V12)decltype(data_.V12)(a.data_.V12);break;
#define _impl_adt_Mc12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) _impl_adt_Mc11(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11)case kind::V12:new(&data_.V12)decltype(data_.V12)(std::move(a.data_.V12));break;
#define adt12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12) class NAME {public:enum class kind{_impl_adt_K12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)};private:kind kind_;union data{_impl_adt_D12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}data_;public:class matcher{_impl_adt_MF12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)public:_impl_adt_MM12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}_impl_adt_M12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)void match(matcher const& m){switch(kind_){_impl_adt_MS12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)}}private:
#define _impl_adt_K13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_K12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)V13,
#define _impl_adt_D13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)_impl_adt_D12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)_impl_adt_real(T13)V13;
#define _impl_adt_MF13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_MF12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)std::function<void(T13)>V13##_;
#define _impl_adt_MM13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_MM12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)template<class T=T13>void call_##V13(_impl_adt_real(T13)a)const{_call_func(V13##_, a);}matcher& V13(std::function<void(T13)>f){V13##_=f;return *this;}
#define _impl_adt_M13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_M12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)template<class T=T13,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V13(_impl_adt_real(T13)const& t){NAME ret(kind::V13);try{new(&ret.data_.V13)T(t);}catch(...){std::terminate();}return ret;}template<class T=T13,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V13(_impl_adt_real(T13)&& t){NAME ret(kind::V13);try{new(&ret.data_.V13)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T13,class=std::enable_if_t<std::is_void<T>::value>>static NAME V13(){NAME ret(kind::V13);return ret;}
#define _impl_adt_MS13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_MS12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:m.call_##V13(data_.V13);break;
#define _impl_adt_Ds13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_Ds12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:data_.V13.~decltype(data_.V13)();break;
#define _impl_adt_Cc13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_Cc12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:new(&data_.V13)decltype(data_.V13)(a.data_.V13);break;
#define _impl_adt_Mc13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) _impl_adt_Mc12(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12)case kind::V13:new(&data_.V13)decltype(data_.V13)(std::move(a.data_.V13));break;
#define adt13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13) class NAME {public:enum class kind{_impl_adt_K13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)};private:kind kind_;union data{_impl_adt_D13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}data_;public:class matcher{_impl_adt_MF13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)public:_impl_adt_MM13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}_impl_adt_M13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)void match(matcher const& m){switch(kind_){_impl_adt_MS13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)}}private:
#define _impl_adt_K14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_K13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)V14,
#define _impl_adt_D14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)_impl_adt_D13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)_impl_adt_real(T14)V14;
#define _impl_adt_MF14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_MF13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)std::function<void(T14)>V14##_;
#define _impl_adt_MM14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_MM13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)template<class T=T14>void call_##V14(_impl_adt_real(T14)a)const{_call_func(V14##_, a);}matcher& V14(std::function<void(T14)>f){V14##_=f;return *this;}
#define _impl_adt_M14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_M13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)template<class T=T14,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V14(_impl_adt_real(T14)const& t){NAME ret(kind::V14);try{new(&ret.data_.V14)T(t);}catch(...){std::terminate();}return ret;}template<class T=T14,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V14(_impl_adt_real(T14)&& t){NAME ret(kind::V14);try{new(&ret.data_.V14)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T14,class=std::enable_if_t<std::is_void<T>::value>>static NAME V14(){NAME ret(kind::V14);return ret;}
#define _impl_adt_MS14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_MS13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:m.call_##V14(data_.V14);break;
#define _impl_adt_Ds14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_Ds13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:data_.V14.~decltype(data_.V14)();break;
#define _impl_adt_Cc14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_Cc13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:new(&data_.V14)decltype(data_.V14)(a.data_.V14);break;
#define _impl_adt_Mc14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) _impl_adt_Mc13(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13)case kind::V14:new(&data_.V14)decltype(data_.V14)(std::move(a.data_.V14));break;
#define adt14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14) class NAME {public:enum class kind{_impl_adt_K14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)};private:kind kind_;union data{_impl_adt_D14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}data_;public:class matcher{_impl_adt_MF14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)public:_impl_adt_MM14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}_impl_adt_M14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)void match(matcher const& m){switch(kind_){_impl_adt_MS14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)}}private:
#define _impl_adt_K15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_K14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)V15,
#define _impl_adt_D15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)_impl_adt_D14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)_impl_adt_real(T15)V15;
#define _impl_adt_MF15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_MF14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)std::function<void(T15)>V15##_;
#define _impl_adt_MM15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_MM14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)template<class T=T15>void call_##V15(_impl_adt_real(T15)a)const{_call_func(V15##_, a);}matcher& V15(std::function<void(T15)>f){V15##_=f;return *this;}
#define _impl_adt_M15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_M14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)template<class T=T15,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V15(_impl_adt_real(T15)const& t){NAME ret(kind::V15);try{new(&ret.data_.V15)T(t);}catch(...){std::terminate();}return ret;}template<class T=T15,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V15(_impl_adt_real(T15)&& t){NAME ret(kind::V15);try{new(&ret.data_.V15)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T15,class=std::enable_if_t<std::is_void<T>::value>>static NAME V15(){NAME ret(kind::V15);return ret;}
#define _impl_adt_MS15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_MS14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:m.call_##V15(data_.V15);break;
#define _impl_adt_Ds15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_Ds14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:data_.V15.~decltype(data_.V15)();break;
#define _impl_adt_Cc15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_Cc14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:new(&data_.V15)decltype(data_.V15)(a.data_.V15);break;
#define _impl_adt_Mc15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) _impl_adt_Mc14(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14)case kind::V15:new(&data_.V15)decltype(data_.V15)(std::move(a.data_.V15));break;
#define adt15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15) class NAME {public:enum class kind{_impl_adt_K15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)};private:kind kind_;union data{_impl_adt_D15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}data_;public:class matcher{_impl_adt_MF15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)public:_impl_adt_MM15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}_impl_adt_M15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)void match(matcher const& m){switch(kind_){_impl_adt_MS15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)}}private:
#define _impl_adt_K16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_K15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)V16,
#define _impl_adt_D16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)_impl_adt_D15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)_impl_adt_real(T16)V16;
#define _impl_adt_MF16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_MF15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)std::function<void(T16)>V16##_;
#define _impl_adt_MM16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_MM15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)template<class T=T16>void call_##V16(_impl_adt_real(T16)a)const{_call_func(V16##_, a);}matcher& V16(std::function<void(T16)>f){V16##_=f;return *this;}
#define _impl_adt_M16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_M15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)template<class T=T16,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V16(_impl_adt_real(T16)const& t){NAME ret(kind::V16);try{new(&ret.data_.V16)T(t);}catch(...){std::terminate();}return ret;}template<class T=T16,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V16(_impl_adt_real(T16)&& t){NAME ret(kind::V16);try{new(&ret.data_.V16)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T16,class=std::enable_if_t<std::is_void<T>::value>>static NAME V16(){NAME ret(kind::V16);return ret;}
#define _impl_adt_MS16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_MS15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:m.call_##V16(data_.V16);break;
#define _impl_adt_Ds16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_Ds15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:data_.V16.~decltype(data_.V16)();break;
#define _impl_adt_Cc16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_Cc15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:new(&data_.V16)decltype(data_.V16)(a.data_.V16);break;
#define _impl_adt_Mc16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) _impl_adt_Mc15(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15)case kind::V16:new(&data_.V16)decltype(data_.V16)(std::move(a.data_.V16));break;
#define adt16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16) class NAME {public:enum class kind{_impl_adt_K16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)};private:kind kind_;union data{_impl_adt_D16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}data_;public:class matcher{_impl_adt_MF16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)public:_impl_adt_MM16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}_impl_adt_M16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)void match(matcher const& m){switch(kind_){_impl_adt_MS16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)}}private:
#define _impl_adt_K17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_K16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)V17,
#define _impl_adt_D17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)_impl_adt_D16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)_impl_adt_real(T17)V17;
#define _impl_adt_MF17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_MF16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)std::function<void(T17)>V17##_;
#define _impl_adt_MM17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_MM16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)template<class T=T17>void call_##V17(_impl_adt_real(T17)a)const{_call_func(V17##_, a);}matcher& V17(std::function<void(T17)>f){V17##_=f;return *this;}
#define _impl_adt_M17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_M16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)template<class T=T17,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V17(_impl_adt_real(T17)const& t){NAME ret(kind::V17);try{new(&ret.data_.V17)T(t);}catch(...){std::terminate();}return ret;}template<class T=T17,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V17(_impl_adt_real(T17)&& t){NAME ret(kind::V17);try{new(&ret.data_.V17)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T17,class=std::enable_if_t<std::is_void<T>::value>>static NAME V17(){NAME ret(kind::V17);return ret;}
#define _impl_adt_MS17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_MS16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:m.call_##V17(data_.V17);break;
#define _impl_adt_Ds17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_Ds16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:data_.V17.~decltype(data_.V17)();break;
#define _impl_adt_Cc17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_Cc16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:new(&data_.V17)decltype(data_.V17)(a.data_.V17);break;
#define _impl_adt_Mc17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) _impl_adt_Mc16(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16)case kind::V17:new(&data_.V17)decltype(data_.V17)(std::move(a.data_.V17));break;
#define adt17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17) class NAME {public:enum class kind{_impl_adt_K17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)};private:kind kind_;union data{_impl_adt_D17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}data_;public:class matcher{_impl_adt_MF17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)public:_impl_adt_MM17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}_impl_adt_M17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)void match(matcher const& m){switch(kind_){_impl_adt_MS17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)}}private:
#define _impl_adt_K18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_K17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)V18,
#define _impl_adt_D18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)_impl_adt_D17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)_impl_adt_real(T18)V18;
#define _impl_adt_MF18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_MF17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)std::function<void(T18)>V18##_;
#define _impl_adt_MM18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_MM17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)template<class T=T18>void call_##V18(_impl_adt_real(T18)a)const{_call_func(V18##_, a);}matcher& V18(std::function<void(T18)>f){V18##_=f;return *this;}
#define _impl_adt_M18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_M17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)template<class T=T18,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V18(_impl_adt_real(T18)const& t){NAME ret(kind::V18);try{new(&ret.data_.V18)T(t);}catch(...){std::terminate();}return ret;}template<class T=T18,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V18(_impl_adt_real(T18)&& t){NAME ret(kind::V18);try{new(&ret.data_.V18)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T18,class=std::enable_if_t<std::is_void<T>::value>>static NAME V18(){NAME ret(kind::V18);return ret;}
#define _impl_adt_MS18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_MS17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:m.call_##V18(data_.V18);break;
#define _impl_adt_Ds18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_Ds17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:data_.V18.~decltype(data_.V18)();break;
#define _impl_adt_Cc18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_Cc17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:new(&data_.V18)decltype(data_.V18)(a.data_.V18);break;
#define _impl_adt_Mc18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) _impl_adt_Mc17(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17)case kind::V18:new(&data_.V18)decltype(data_.V18)(std::move(a.data_.V18));break;
#define adt18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18) class NAME {public:enum class kind{_impl_adt_K18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)};private:kind kind_;union data{_impl_adt_D18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}data_;public:class matcher{_impl_adt_MF18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)public:_impl_adt_MM18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}_impl_adt_M18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)void match(matcher const& m){switch(kind_){_impl_adt_MS18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)}}private:
#define _impl_adt_K19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_K18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)V19,
#define _impl_adt_D19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)_impl_adt_D18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)_impl_adt_real(T19)V19;
#define _impl_adt_MF19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_MF18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)std::function<void(T19)>V19##_;
#define _impl_adt_MM19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_MM18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)template<class T=T19>void call_##V19(_impl_adt_real(T19)a)const{_call_func(V19##_, a);}matcher& V19(std::function<void(T19)>f){V19##_=f;return *this;}
#define _impl_adt_M19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_M18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)template<class T=T19,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V19(_impl_adt_real(T19)const& t){NAME ret(kind::V19);try{new(&ret.data_.V19)T(t);}catch(...){std::terminate();}return ret;}template<class T=T19,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V19(_impl_adt_real(T19)&& t){NAME ret(kind::V19);try{new(&ret.data_.V19)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T19,class=std::enable_if_t<std::is_void<T>::value>>static NAME V19(){NAME ret(kind::V19);return ret;}
#define _impl_adt_MS19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_MS18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:m.call_##V19(data_.V19);break;
#define _impl_adt_Ds19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_Ds18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:data_.V19.~decltype(data_.V19)();break;
#define _impl_adt_Cc19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_Cc18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:new(&data_.V19)decltype(data_.V19)(a.data_.V19);break;
#define _impl_adt_Mc19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) _impl_adt_Mc18(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18)case kind::V19:new(&data_.V19)decltype(data_.V19)(std::move(a.data_.V19));break;
#define adt19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19) class NAME {public:enum class kind{_impl_adt_K19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)};private:kind kind_;union data{_impl_adt_D19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}data_;public:class matcher{_impl_adt_MF19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)public:_impl_adt_MM19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}_impl_adt_M19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)void match(matcher const& m){switch(kind_){_impl_adt_MS19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)}}private:
#define _impl_adt_K1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_K19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)V1a,
#define _impl_adt_D1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)_impl_adt_D19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)_impl_adt_real(T1a)V1a;
#define _impl_adt_MF1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_MF19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)std::function<void(T1a)>V1a##_;
#define _impl_adt_MM1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_MM19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)template<class T=T1a>void call_##V1a(_impl_adt_real(T1a)a)const{_call_func(V1a##_, a);}matcher& V1a(std::function<void(T1a)>f){V1a##_=f;return *this;}
#define _impl_adt_M1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_M19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)template<class T=T1a,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1a(_impl_adt_real(T1a)const& t){NAME ret(kind::V1a);try{new(&ret.data_.V1a)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1a,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1a(_impl_adt_real(T1a)&& t){NAME ret(kind::V1a);try{new(&ret.data_.V1a)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1a,class=std::enable_if_t<std::is_void<T>::value>>static NAME V1a(){NAME ret(kind::V1a);return ret;}
#define _impl_adt_MS1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_MS19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:m.call_##V1a(data_.V1a);break;
#define _impl_adt_Ds1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_Ds19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:data_.V1a.~decltype(data_.V1a)();break;
#define _impl_adt_Cc1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_Cc19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:new(&data_.V1a)decltype(data_.V1a)(a.data_.V1a);break;
#define _impl_adt_Mc1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) _impl_adt_Mc19(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19)case kind::V1a:new(&data_.V1a)decltype(data_.V1a)(std::move(a.data_.V1a));break;
#define adt1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a) class NAME {public:enum class kind{_impl_adt_K1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)};private:kind kind_;union data{_impl_adt_D1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}data_;public:class matcher{_impl_adt_MF1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)public:_impl_adt_MM1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}_impl_adt_M1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)void match(matcher const& m){switch(kind_){_impl_adt_MS1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)}}private:
#define _impl_adt_K1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_K1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)V1b,
#define _impl_adt_D1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)_impl_adt_D1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)_impl_adt_real(T1b)V1b;
#define _impl_adt_MF1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_MF1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)std::function<void(T1b)>V1b##_;
#define _impl_adt_MM1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_MM1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)template<class T=T1b>void call_##V1b(_impl_adt_real(T1b)a)const{_call_func(V1b##_, a);}matcher& V1b(std::function<void(T1b)>f){V1b##_=f;return *this;}
#define _impl_adt_M1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_M1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)template<class T=T1b,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1b(_impl_adt_real(T1b)const& t){NAME ret(kind::V1b);try{new(&ret.data_.V1b)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1b,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1b(_impl_adt_real(T1b)&& t){NAME ret(kind::V1b);try{new(&ret.data_.V1b)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1b,class=std::enable_if_t<std::is_void<T>::value>>static NAME V1b(){NAME ret(kind::V1b);return ret;}
#define _impl_adt_MS1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_MS1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:m.call_##V1b(data_.V1b);break;
#define _impl_adt_Ds1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_Ds1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:data_.V1b.~decltype(data_.V1b)();break;
#define _impl_adt_Cc1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_Cc1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:new(&data_.V1b)decltype(data_.V1b)(a.data_.V1b);break;
#define _impl_adt_Mc1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) _impl_adt_Mc1a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a)case kind::V1b:new(&data_.V1b)decltype(data_.V1b)(std::move(a.data_.V1b));break;
#define adt1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b) class NAME {public:enum class kind{_impl_adt_K1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)};private:kind kind_;union data{_impl_adt_D1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}data_;public:class matcher{_impl_adt_MF1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)public:_impl_adt_MM1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}_impl_adt_M1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)void match(matcher const& m){switch(kind_){_impl_adt_MS1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)}}private:
#define _impl_adt_K1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_K1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)V1c,
#define _impl_adt_D1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)_impl_adt_D1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)_impl_adt_real(T1c)V1c;
#define _impl_adt_MF1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_MF1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)std::function<void(T1c)>V1c##_;
#define _impl_adt_MM1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_MM1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)template<class T=T1c>void call_##V1c(_impl_adt_real(T1c)a)const{_call_func(V1c##_, a);}matcher& V1c(std::function<void(T1c)>f){V1c##_=f;return *this;}
#define _impl_adt_M1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_M1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)template<class T=T1c,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1c(_impl_adt_real(T1c)const& t){NAME ret(kind::V1c);try{new(&ret.data_.V1c)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1c,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1c(_impl_adt_real(T1c)&& t){NAME ret(kind::V1c);try{new(&ret.data_.V1c)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1c,class=std::enable_if_t<std::is_void<T>::value>>static NAME V1c(){NAME ret(kind::V1c);return ret;}
#define _impl_adt_MS1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_MS1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:m.call_##V1c(data_.V1c);break;
#define _impl_adt_Ds1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_Ds1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:data_.V1c.~decltype(data_.V1c)();break;
#define _impl_adt_Cc1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_Cc1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:new(&data_.V1c)decltype(data_.V1c)(a.data_.V1c);break;
#define _impl_adt_Mc1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) _impl_adt_Mc1b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b)case kind::V1c:new(&data_.V1c)decltype(data_.V1c)(std::move(a.data_.V1c));break;
#define adt1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c) class NAME {public:enum class kind{_impl_adt_K1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)};private:kind kind_;union data{_impl_adt_D1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}data_;public:class matcher{_impl_adt_MF1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)public:_impl_adt_MM1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}_impl_adt_M1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)void match(matcher const& m){switch(kind_){_impl_adt_MS1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)}}private:
#define _impl_adt_K1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_K1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)V1d,
#define _impl_adt_D1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)_impl_adt_D1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)_impl_adt_real(T1d)V1d;
#define _impl_adt_MF1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_MF1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)std::function<void(T1d)>V1d##_;
#define _impl_adt_MM1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_MM1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)template<class T=T1d>void call_##V1d(_impl_adt_real(T1d)a)const{_call_func(V1d##_, a);}matcher& V1d(std::function<void(T1d)>f){V1d##_=f;return *this;}
#define _impl_adt_M1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_M1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)template<class T=T1d,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1d(_impl_adt_real(T1d)const& t){NAME ret(kind::V1d);try{new(&ret.data_.V1d)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1d,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1d(_impl_adt_real(T1d)&& t){NAME ret(kind::V1d);try{new(&ret.data_.V1d)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1d,class=std::enable_if_t<std::is_void<T>::value>>static NAME V1d(){NAME ret(kind::V1d);return ret;}
#define _impl_adt_MS1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_MS1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:m.call_##V1d(data_.V1d);break;
#define _impl_adt_Ds1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_Ds1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:data_.V1d.~decltype(data_.V1d)();break;
#define _impl_adt_Cc1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_Cc1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:new(&data_.V1d)decltype(data_.V1d)(a.data_.V1d);break;
#define _impl_adt_Mc1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) _impl_adt_Mc1c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c)case kind::V1d:new(&data_.V1d)decltype(data_.V1d)(std::move(a.data_.V1d));break;
#define adt1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d) class NAME {public:enum class kind{_impl_adt_K1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)};private:kind kind_;union data{_impl_adt_D1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}data_;public:class matcher{_impl_adt_MF1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)public:_impl_adt_MM1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}_impl_adt_M1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)void match(matcher const& m){switch(kind_){_impl_adt_MS1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)}}private:
#define _impl_adt_K1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_K1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)V1e,
#define _impl_adt_D1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)_impl_adt_D1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)_impl_adt_real(T1e)V1e;
#define _impl_adt_MF1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_MF1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)std::function<void(T1e)>V1e##_;
#define _impl_adt_MM1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_MM1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)template<class T=T1e>void call_##V1e(_impl_adt_real(T1e)a)const{_call_func(V1e##_, a);}matcher& V1e(std::function<void(T1e)>f){V1e##_=f;return *this;}
#define _impl_adt_M1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_M1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)template<class T=T1e,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1e(_impl_adt_real(T1e)const& t){NAME ret(kind::V1e);try{new(&ret.data_.V1e)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1e,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1e(_impl_adt_real(T1e)&& t){NAME ret(kind::V1e);try{new(&ret.data_.V1e)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1e,class=std::enable_if_t<std::is_void<T>::value>>static NAME V1e(){NAME ret(kind::V1e);return ret;}
#define _impl_adt_MS1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_MS1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:m.call_##V1e(data_.V1e);break;
#define _impl_adt_Ds1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_Ds1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:data_.V1e.~decltype(data_.V1e)();break;
#define _impl_adt_Cc1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_Cc1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:new(&data_.V1e)decltype(data_.V1e)(a.data_.V1e);break;
#define _impl_adt_Mc1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) _impl_adt_Mc1d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d)case kind::V1e:new(&data_.V1e)decltype(data_.V1e)(std::move(a.data_.V1e));break;
#define adt1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e) class NAME {public:enum class kind{_impl_adt_K1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)};private:kind kind_;union data{_impl_adt_D1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}data_;public:class matcher{_impl_adt_MF1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)public:_impl_adt_MM1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}_impl_adt_M1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)void match(matcher const& m){switch(kind_){_impl_adt_MS1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)}}private:
#define _impl_adt_K1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_K1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)V1f,
#define _impl_adt_D1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)_impl_adt_D1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)_impl_adt_real(T1f)V1f;
#define _impl_adt_MF1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_MF1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)std::function<void(T1f)>V1f##_;
#define _impl_adt_MM1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_MM1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)template<class T=T1f>void call_##V1f(_impl_adt_real(T1f)a)const{_call_func(V1f##_, a);}matcher& V1f(std::function<void(T1f)>f){V1f##_=f;return *this;}
#define _impl_adt_M1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_M1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)template<class T=T1f,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1f(_impl_adt_real(T1f)const& t){NAME ret(kind::V1f);try{new(&ret.data_.V1f)T(t);}catch(...){std::terminate();}return ret;}template<class T=T1f,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V1f(_impl_adt_real(T1f)&& t){NAME ret(kind::V1f);try{new(&ret.data_.V1f)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T1f,class=std::enable_if_t<std::is_void<T>::value>>static NAME V1f(){NAME ret(kind::V1f);return ret;}
#define _impl_adt_MS1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_MS1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:m.call_##V1f(data_.V1f);break;
#define _impl_adt_Ds1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_Ds1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:data_.V1f.~decltype(data_.V1f)();break;
#define _impl_adt_Cc1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_Cc1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:new(&data_.V1f)decltype(data_.V1f)(a.data_.V1f);break;
#define _impl_adt_Mc1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) _impl_adt_Mc1e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e)case kind::V1f:new(&data_.V1f)decltype(data_.V1f)(std::move(a.data_.V1f));break;
#define adt1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f) class NAME {public:enum class kind{_impl_adt_K1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)};private:kind kind_;union data{_impl_adt_D1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}data_;public:class matcher{_impl_adt_MF1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)public:_impl_adt_MM1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}_impl_adt_M1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)void match(matcher const& m){switch(kind_){_impl_adt_MS1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)}}private:
#define _impl_adt_K20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_K1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)V20,
#define _impl_adt_D20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)_impl_adt_D1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)_impl_adt_real(T20)V20;
#define _impl_adt_MF20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_MF1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)std::function<void(T20)>V20##_;
#define _impl_adt_MM20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_MM1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)template<class T=T20>void call_##V20(_impl_adt_real(T20)a)const{_call_func(V20##_, a);}matcher& V20(std::function<void(T20)>f){V20##_=f;return *this;}
#define _impl_adt_M20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_M1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)template<class T=T20,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V20(_impl_adt_real(T20)const& t){NAME ret(kind::V20);try{new(&ret.data_.V20)T(t);}catch(...){std::terminate();}return ret;}template<class T=T20,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V20(_impl_adt_real(T20)&& t){NAME ret(kind::V20);try{new(&ret.data_.V20)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T20,class=std::enable_if_t<std::is_void<T>::value>>static NAME V20(){NAME ret(kind::V20);return ret;}
#define _impl_adt_MS20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_MS1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:m.call_##V20(data_.V20);break;
#define _impl_adt_Ds20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_Ds1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:data_.V20.~decltype(data_.V20)();break;
#define _impl_adt_Cc20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_Cc1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:new(&data_.V20)decltype(data_.V20)(a.data_.V20);break;
#define _impl_adt_Mc20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) _impl_adt_Mc1f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f)case kind::V20:new(&data_.V20)decltype(data_.V20)(std::move(a.data_.V20));break;
#define adt20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20) class NAME {public:enum class kind{_impl_adt_K20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)};private:kind kind_;union data{_impl_adt_D20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}data_;public:class matcher{_impl_adt_MF20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)public:_impl_adt_MM20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}_impl_adt_M20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)void match(matcher const& m){switch(kind_){_impl_adt_MS20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)}}private:
#define _impl_adt_K21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_K20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)V21,
#define _impl_adt_D21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)_impl_adt_D20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)_impl_adt_real(T21)V21;
#define _impl_adt_MF21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_MF20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)std::function<void(T21)>V21##_;
#define _impl_adt_MM21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_MM20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)template<class T=T21>void call_##V21(_impl_adt_real(T21)a)const{_call_func(V21##_, a);}matcher& V21(std::function<void(T21)>f){V21##_=f;return *this;}
#define _impl_adt_M21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_M20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)template<class T=T21,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V21(_impl_adt_real(T21)const& t){NAME ret(kind::V21);try{new(&ret.data_.V21)T(t);}catch(...){std::terminate();}return ret;}template<class T=T21,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V21(_impl_adt_real(T21)&& t){NAME ret(kind::V21);try{new(&ret.data_.V21)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T21,class=std::enable_if_t<std::is_void<T>::value>>static NAME V21(){NAME ret(kind::V21);return ret;}
#define _impl_adt_MS21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_MS20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)case kind::V21:m.call_##V21(data_.V21);break;
#define _impl_adt_Ds21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_Ds20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)case kind::V21:data_.V21.~decltype(data_.V21)();break;
#define _impl_adt_Cc21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_Cc20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)case kind::V21:new(&data_.V21)decltype(data_.V21)(a.data_.V21);break;
#define _impl_adt_Mc21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) _impl_adt_Mc20(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20)case kind::V21:new(&data_.V21)decltype(data_.V21)(std::move(a.data_.V21));break;
#define adt21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21) class NAME {public:enum class kind{_impl_adt_K21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)};private:kind kind_;union data{_impl_adt_D21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)}data_;public:class matcher{_impl_adt_MF21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)public:_impl_adt_MM21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)}}_impl_adt_M21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)void match(matcher const& m){switch(kind_){_impl_adt_MS21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)}}private:
#define _impl_adt_K22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_K21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)V22,
#define _impl_adt_D22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)_impl_adt_D21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)_impl_adt_real(T22)V22;
#define _impl_adt_MF22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_MF21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)std::function<void(T22)>V22##_;
#define _impl_adt_MM22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_MM21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)template<class T=T22>void call_##V22(_impl_adt_real(T22)a)const{_call_func(V22##_, a);}matcher& V22(std::function<void(T22)>f){V22##_=f;return *this;}
#define _impl_adt_M22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_M21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)template<class T=T22,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V22(_impl_adt_real(T22)const& t){NAME ret(kind::V22);try{new(&ret.data_.V22)T(t);}catch(...){std::terminate();}return ret;}template<class T=T22,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V22(_impl_adt_real(T22)&& t){NAME ret(kind::V22);try{new(&ret.data_.V22)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T22,class=std::enable_if_t<std::is_void<T>::value>>static NAME V22(){NAME ret(kind::V22);return ret;}
#define _impl_adt_MS22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_MS21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)case kind::V22:m.call_##V22(data_.V22);break;
#define _impl_adt_Ds22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_Ds21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)case kind::V22:data_.V22.~decltype(data_.V22)();break;
#define _impl_adt_Cc22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_Cc21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)case kind::V22:new(&data_.V22)decltype(data_.V22)(a.data_.V22);break;
#define _impl_adt_Mc22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) _impl_adt_Mc21(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21)case kind::V22:new(&data_.V22)decltype(data_.V22)(std::move(a.data_.V22));break;
#define adt22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22) class NAME {public:enum class kind{_impl_adt_K22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)};private:kind kind_;union data{_impl_adt_D22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)}data_;public:class matcher{_impl_adt_MF22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)public:_impl_adt_MM22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)}}_impl_adt_M22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)void match(matcher const& m){switch(kind_){_impl_adt_MS22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)}}private:
#define _impl_adt_K23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_K22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)V23,
#define _impl_adt_D23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)_impl_adt_D22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)_impl_adt_real(T23)V23;
#define _impl_adt_MF23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_MF22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)std::function<void(T23)>V23##_;
#define _impl_adt_MM23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_MM22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)template<class T=T23>void call_##V23(_impl_adt_real(T23)a)const{_call_func(V23##_, a);}matcher& V23(std::function<void(T23)>f){V23##_=f;return *this;}
#define _impl_adt_M23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_M22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)template<class T=T23,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V23(_impl_adt_real(T23)const& t){NAME ret(kind::V23);try{new(&ret.data_.V23)T(t);}catch(...){std::terminate();}return ret;}template<class T=T23,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V23(_impl_adt_real(T23)&& t){NAME ret(kind::V23);try{new(&ret.data_.V23)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T23,class=std::enable_if_t<std::is_void<T>::value>>static NAME V23(){NAME ret(kind::V23);return ret;}
#define _impl_adt_MS23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_MS22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)case kind::V23:m.call_##V23(data_.V23);break;
#define _impl_adt_Ds23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_Ds22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)case kind::V23:data_.V23.~decltype(data_.V23)();break;
#define _impl_adt_Cc23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_Cc22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)case kind::V23:new(&data_.V23)decltype(data_.V23)(a.data_.V23);break;
#define _impl_adt_Mc23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) _impl_adt_Mc22(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22)case kind::V23:new(&data_.V23)decltype(data_.V23)(std::move(a.data_.V23));break;
#define adt23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23) class NAME {public:enum class kind{_impl_adt_K23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)};private:kind kind_;union data{_impl_adt_D23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)}data_;public:class matcher{_impl_adt_MF23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)public:_impl_adt_MM23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)}}_impl_adt_M23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)void match(matcher const& m){switch(kind_){_impl_adt_MS23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)}}private:
#define _impl_adt_K24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_K23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)V24,
#define _impl_adt_D24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)_impl_adt_D23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)_impl_adt_real(T24)V24;
#define _impl_adt_MF24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_MF23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)std::function<void(T24)>V24##_;
#define _impl_adt_MM24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_MM23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)template<class T=T24>void call_##V24(_impl_adt_real(T24)a)const{_call_func(V24##_, a);}matcher& V24(std::function<void(T24)>f){V24##_=f;return *this;}
#define _impl_adt_M24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_M23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)template<class T=T24,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V24(_impl_adt_real(T24)const& t){NAME ret(kind::V24);try{new(&ret.data_.V24)T(t);}catch(...){std::terminate();}return ret;}template<class T=T24,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V24(_impl_adt_real(T24)&& t){NAME ret(kind::V24);try{new(&ret.data_.V24)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T24,class=std::enable_if_t<std::is_void<T>::value>>static NAME V24(){NAME ret(kind::V24);return ret;}
#define _impl_adt_MS24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_MS23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)case kind::V24:m.call_##V24(data_.V24);break;
#define _impl_adt_Ds24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_Ds23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)case kind::V24:data_.V24.~decltype(data_.V24)();break;
#define _impl_adt_Cc24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_Cc23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)case kind::V24:new(&data_.V24)decltype(data_.V24)(a.data_.V24);break;
#define _impl_adt_Mc24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) _impl_adt_Mc23(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23)case kind::V24:new(&data_.V24)decltype(data_.V24)(std::move(a.data_.V24));break;
#define adt24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24) class NAME {public:enum class kind{_impl_adt_K24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)};private:kind kind_;union data{_impl_adt_D24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)}data_;public:class matcher{_impl_adt_MF24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)public:_impl_adt_MM24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)}}_impl_adt_M24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)void match(matcher const& m){switch(kind_){_impl_adt_MS24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)}}private:
#define _impl_adt_K25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_K24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)V25,
#define _impl_adt_D25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)_impl_adt_D24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)_impl_adt_real(T25)V25;
#define _impl_adt_MF25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_MF24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)std::function<void(T25)>V25##_;
#define _impl_adt_MM25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_MM24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)template<class T=T25>void call_##V25(_impl_adt_real(T25)a)const{_call_func(V25##_, a);}matcher& V25(std::function<void(T25)>f){V25##_=f;return *this;}
#define _impl_adt_M25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_M24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)template<class T=T25,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V25(_impl_adt_real(T25)const& t){NAME ret(kind::V25);try{new(&ret.data_.V25)T(t);}catch(...){std::terminate();}return ret;}template<class T=T25,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V25(_impl_adt_real(T25)&& t){NAME ret(kind::V25);try{new(&ret.data_.V25)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T25,class=std::enable_if_t<std::is_void<T>::value>>static NAME V25(){NAME ret(kind::V25);return ret;}
#define _impl_adt_MS25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_MS24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)case kind::V25:m.call_##V25(data_.V25);break;
#define _impl_adt_Ds25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_Ds24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)case kind::V25:data_.V25.~decltype(data_.V25)();break;
#define _impl_adt_Cc25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_Cc24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)case kind::V25:new(&data_.V25)decltype(data_.V25)(a.data_.V25);break;
#define _impl_adt_Mc25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) _impl_adt_Mc24(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24)case kind::V25:new(&data_.V25)decltype(data_.V25)(std::move(a.data_.V25));break;
#define adt25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25) class NAME {public:enum class kind{_impl_adt_K25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)};private:kind kind_;union data{_impl_adt_D25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)}data_;public:class matcher{_impl_adt_MF25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)public:_impl_adt_MM25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)}}_impl_adt_M25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)void match(matcher const& m){switch(kind_){_impl_adt_MS25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)}}private:
#define _impl_adt_K26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_K25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)V26,
#define _impl_adt_D26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)_impl_adt_D25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)_impl_adt_real(T26)V26;
#define _impl_adt_MF26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_MF25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)std::function<void(T26)>V26##_;
#define _impl_adt_MM26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_MM25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)template<class T=T26>void call_##V26(_impl_adt_real(T26)a)const{_call_func(V26##_, a);}matcher& V26(std::function<void(T26)>f){V26##_=f;return *this;}
#define _impl_adt_M26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_M25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)template<class T=T26,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V26(_impl_adt_real(T26)const& t){NAME ret(kind::V26);try{new(&ret.data_.V26)T(t);}catch(...){std::terminate();}return ret;}template<class T=T26,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V26(_impl_adt_real(T26)&& t){NAME ret(kind::V26);try{new(&ret.data_.V26)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T26,class=std::enable_if_t<std::is_void<T>::value>>static NAME V26(){NAME ret(kind::V26);return ret;}
#define _impl_adt_MS26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_MS25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)case kind::V26:m.call_##V26(data_.V26);break;
#define _impl_adt_Ds26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_Ds25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)case kind::V26:data_.V26.~decltype(data_.V26)();break;
#define _impl_adt_Cc26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_Cc25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)case kind::V26:new(&data_.V26)decltype(data_.V26)(a.data_.V26);break;
#define _impl_adt_Mc26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) _impl_adt_Mc25(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25)case kind::V26:new(&data_.V26)decltype(data_.V26)(std::move(a.data_.V26));break;
#define adt26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26) class NAME {public:enum class kind{_impl_adt_K26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)};private:kind kind_;union data{_impl_adt_D26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)}data_;public:class matcher{_impl_adt_MF26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)public:_impl_adt_MM26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)}}_impl_adt_M26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)void match(matcher const& m){switch(kind_){_impl_adt_MS26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)}}private:
#define _impl_adt_K27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_K26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)V27,
#define _impl_adt_D27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)_impl_adt_D26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)_impl_adt_real(T27)V27;
#define _impl_adt_MF27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_MF26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)std::function<void(T27)>V27##_;
#define _impl_adt_MM27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_MM26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)template<class T=T27>void call_##V27(_impl_adt_real(T27)a)const{_call_func(V27##_, a);}matcher& V27(std::function<void(T27)>f){V27##_=f;return *this;}
#define _impl_adt_M27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_M26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)template<class T=T27,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V27(_impl_adt_real(T27)const& t){NAME ret(kind::V27);try{new(&ret.data_.V27)T(t);}catch(...){std::terminate();}return ret;}template<class T=T27,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V27(_impl_adt_real(T27)&& t){NAME ret(kind::V27);try{new(&ret.data_.V27)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T27,class=std::enable_if_t<std::is_void<T>::value>>static NAME V27(){NAME ret(kind::V27);return ret;}
#define _impl_adt_MS27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_MS26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)case kind::V27:m.call_##V27(data_.V27);break;
#define _impl_adt_Ds27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_Ds26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)case kind::V27:data_.V27.~decltype(data_.V27)();break;
#define _impl_adt_Cc27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_Cc26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)case kind::V27:new(&data_.V27)decltype(data_.V27)(a.data_.V27);break;
#define _impl_adt_Mc27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) _impl_adt_Mc26(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26)case kind::V27:new(&data_.V27)decltype(data_.V27)(std::move(a.data_.V27));break;
#define adt27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27) class NAME {public:enum class kind{_impl_adt_K27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)};private:kind kind_;union data{_impl_adt_D27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)}data_;public:class matcher{_impl_adt_MF27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)public:_impl_adt_MM27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)}}_impl_adt_M27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)void match(matcher const& m){switch(kind_){_impl_adt_MS27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)}}private:
#define _impl_adt_K28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_K27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)V28,
#define _impl_adt_D28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)_impl_adt_D27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)_impl_adt_real(T28)V28;
#define _impl_adt_MF28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_MF27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)std::function<void(T28)>V28##_;
#define _impl_adt_MM28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_MM27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)template<class T=T28>void call_##V28(_impl_adt_real(T28)a)const{_call_func(V28##_, a);}matcher& V28(std::function<void(T28)>f){V28##_=f;return *this;}
#define _impl_adt_M28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_M27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)template<class T=T28,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V28(_impl_adt_real(T28)const& t){NAME ret(kind::V28);try{new(&ret.data_.V28)T(t);}catch(...){std::terminate();}return ret;}template<class T=T28,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V28(_impl_adt_real(T28)&& t){NAME ret(kind::V28);try{new(&ret.data_.V28)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T28,class=std::enable_if_t<std::is_void<T>::value>>static NAME V28(){NAME ret(kind::V28);return ret;}
#define _impl_adt_MS28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_MS27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)case kind::V28:m.call_##V28(data_.V28);break;
#define _impl_adt_Ds28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_Ds27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)case kind::V28:data_.V28.~decltype(data_.V28)();break;
#define _impl_adt_Cc28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_Cc27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)case kind::V28:new(&data_.V28)decltype(data_.V28)(a.data_.V28);break;
#define _impl_adt_Mc28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) _impl_adt_Mc27(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27)case kind::V28:new(&data_.V28)decltype(data_.V28)(std::move(a.data_.V28));break;
#define adt28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28) class NAME {public:enum class kind{_impl_adt_K28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)};private:kind kind_;union data{_impl_adt_D28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)}data_;public:class matcher{_impl_adt_MF28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)public:_impl_adt_MM28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)}}_impl_adt_M28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)void match(matcher const& m){switch(kind_){_impl_adt_MS28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)}}private:
#define _impl_adt_K29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_K28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)V29,
#define _impl_adt_D29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)_impl_adt_D28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)_impl_adt_real(T29)V29;
#define _impl_adt_MF29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_MF28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)std::function<void(T29)>V29##_;
#define _impl_adt_MM29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_MM28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)template<class T=T29>void call_##V29(_impl_adt_real(T29)a)const{_call_func(V29##_, a);}matcher& V29(std::function<void(T29)>f){V29##_=f;return *this;}
#define _impl_adt_M29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_M28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)template<class T=T29,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V29(_impl_adt_real(T29)const& t){NAME ret(kind::V29);try{new(&ret.data_.V29)T(t);}catch(...){std::terminate();}return ret;}template<class T=T29,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V29(_impl_adt_real(T29)&& t){NAME ret(kind::V29);try{new(&ret.data_.V29)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T29,class=std::enable_if_t<std::is_void<T>::value>>static NAME V29(){NAME ret(kind::V29);return ret;}
#define _impl_adt_MS29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_MS28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)case kind::V29:m.call_##V29(data_.V29);break;
#define _impl_adt_Ds29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_Ds28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)case kind::V29:data_.V29.~decltype(data_.V29)();break;
#define _impl_adt_Cc29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_Cc28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)case kind::V29:new(&data_.V29)decltype(data_.V29)(a.data_.V29);break;
#define _impl_adt_Mc29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) _impl_adt_Mc28(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28)case kind::V29:new(&data_.V29)decltype(data_.V29)(std::move(a.data_.V29));break;
#define adt29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29) class NAME {public:enum class kind{_impl_adt_K29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)};private:kind kind_;union data{_impl_adt_D29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)}data_;public:class matcher{_impl_adt_MF29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)public:_impl_adt_MM29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)}}_impl_adt_M29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)void match(matcher const& m){switch(kind_){_impl_adt_MS29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)}}private:
#define _impl_adt_K2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_K29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)V2a,
#define _impl_adt_D2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)_impl_adt_D29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)_impl_adt_real(T2a)V2a;
#define _impl_adt_MF2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_MF29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)std::function<void(T2a)>V2a##_;
#define _impl_adt_MM2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_MM29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)template<class T=T2a>void call_##V2a(_impl_adt_real(T2a)a)const{_call_func(V2a##_, a);}matcher& V2a(std::function<void(T2a)>f){V2a##_=f;return *this;}
#define _impl_adt_M2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_M29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)template<class T=T2a,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2a(_impl_adt_real(T2a)const& t){NAME ret(kind::V2a);try{new(&ret.data_.V2a)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2a,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2a(_impl_adt_real(T2a)&& t){NAME ret(kind::V2a);try{new(&ret.data_.V2a)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2a,class=std::enable_if_t<std::is_void<T>::value>>static NAME V2a(){NAME ret(kind::V2a);return ret;}
#define _impl_adt_MS2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_MS29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)case kind::V2a:m.call_##V2a(data_.V2a);break;
#define _impl_adt_Ds2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_Ds29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)case kind::V2a:data_.V2a.~decltype(data_.V2a)();break;
#define _impl_adt_Cc2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_Cc29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)case kind::V2a:new(&data_.V2a)decltype(data_.V2a)(a.data_.V2a);break;
#define _impl_adt_Mc2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) _impl_adt_Mc29(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29)case kind::V2a:new(&data_.V2a)decltype(data_.V2a)(std::move(a.data_.V2a));break;
#define adt2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a) class NAME {public:enum class kind{_impl_adt_K2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)};private:kind kind_;union data{_impl_adt_D2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)}data_;public:class matcher{_impl_adt_MF2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)public:_impl_adt_MM2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)}}_impl_adt_M2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)void match(matcher const& m){switch(kind_){_impl_adt_MS2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)}}private:
#define _impl_adt_K2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_K2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)V2b,
#define _impl_adt_D2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)_impl_adt_D2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)_impl_adt_real(T2b)V2b;
#define _impl_adt_MF2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_MF2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)std::function<void(T2b)>V2b##_;
#define _impl_adt_MM2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_MM2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)template<class T=T2b>void call_##V2b(_impl_adt_real(T2b)a)const{_call_func(V2b##_, a);}matcher& V2b(std::function<void(T2b)>f){V2b##_=f;return *this;}
#define _impl_adt_M2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_M2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)template<class T=T2b,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2b(_impl_adt_real(T2b)const& t){NAME ret(kind::V2b);try{new(&ret.data_.V2b)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2b,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2b(_impl_adt_real(T2b)&& t){NAME ret(kind::V2b);try{new(&ret.data_.V2b)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2b,class=std::enable_if_t<std::is_void<T>::value>>static NAME V2b(){NAME ret(kind::V2b);return ret;}
#define _impl_adt_MS2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_MS2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)case kind::V2b:m.call_##V2b(data_.V2b);break;
#define _impl_adt_Ds2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_Ds2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)case kind::V2b:data_.V2b.~decltype(data_.V2b)();break;
#define _impl_adt_Cc2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_Cc2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)case kind::V2b:new(&data_.V2b)decltype(data_.V2b)(a.data_.V2b);break;
#define _impl_adt_Mc2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) _impl_adt_Mc2a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a)case kind::V2b:new(&data_.V2b)decltype(data_.V2b)(std::move(a.data_.V2b));break;
#define adt2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b) class NAME {public:enum class kind{_impl_adt_K2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)};private:kind kind_;union data{_impl_adt_D2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)}data_;public:class matcher{_impl_adt_MF2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)public:_impl_adt_MM2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)}}_impl_adt_M2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)void match(matcher const& m){switch(kind_){_impl_adt_MS2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)}}private:
#define _impl_adt_K2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_K2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)V2c,
#define _impl_adt_D2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)_impl_adt_D2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)_impl_adt_real(T2c)V2c;
#define _impl_adt_MF2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_MF2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)std::function<void(T2c)>V2c##_;
#define _impl_adt_MM2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_MM2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)template<class T=T2c>void call_##V2c(_impl_adt_real(T2c)a)const{_call_func(V2c##_, a);}matcher& V2c(std::function<void(T2c)>f){V2c##_=f;return *this;}
#define _impl_adt_M2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_M2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)template<class T=T2c,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2c(_impl_adt_real(T2c)const& t){NAME ret(kind::V2c);try{new(&ret.data_.V2c)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2c,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2c(_impl_adt_real(T2c)&& t){NAME ret(kind::V2c);try{new(&ret.data_.V2c)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2c,class=std::enable_if_t<std::is_void<T>::value>>static NAME V2c(){NAME ret(kind::V2c);return ret;}
#define _impl_adt_MS2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_MS2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)case kind::V2c:m.call_##V2c(data_.V2c);break;
#define _impl_adt_Ds2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_Ds2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)case kind::V2c:data_.V2c.~decltype(data_.V2c)();break;
#define _impl_adt_Cc2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_Cc2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)case kind::V2c:new(&data_.V2c)decltype(data_.V2c)(a.data_.V2c);break;
#define _impl_adt_Mc2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) _impl_adt_Mc2b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b)case kind::V2c:new(&data_.V2c)decltype(data_.V2c)(std::move(a.data_.V2c));break;
#define adt2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c) class NAME {public:enum class kind{_impl_adt_K2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)};private:kind kind_;union data{_impl_adt_D2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)}data_;public:class matcher{_impl_adt_MF2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)public:_impl_adt_MM2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)}}_impl_adt_M2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)void match(matcher const& m){switch(kind_){_impl_adt_MS2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)}}private:
#define _impl_adt_K2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_K2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)V2d,
#define _impl_adt_D2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)_impl_adt_D2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)_impl_adt_real(T2d)V2d;
#define _impl_adt_MF2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_MF2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)std::function<void(T2d)>V2d##_;
#define _impl_adt_MM2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_MM2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)template<class T=T2d>void call_##V2d(_impl_adt_real(T2d)a)const{_call_func(V2d##_, a);}matcher& V2d(std::function<void(T2d)>f){V2d##_=f;return *this;}
#define _impl_adt_M2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_M2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)template<class T=T2d,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2d(_impl_adt_real(T2d)const& t){NAME ret(kind::V2d);try{new(&ret.data_.V2d)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2d,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2d(_impl_adt_real(T2d)&& t){NAME ret(kind::V2d);try{new(&ret.data_.V2d)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2d,class=std::enable_if_t<std::is_void<T>::value>>static NAME V2d(){NAME ret(kind::V2d);return ret;}
#define _impl_adt_MS2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_MS2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)case kind::V2d:m.call_##V2d(data_.V2d);break;
#define _impl_adt_Ds2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_Ds2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)case kind::V2d:data_.V2d.~decltype(data_.V2d)();break;
#define _impl_adt_Cc2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_Cc2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)case kind::V2d:new(&data_.V2d)decltype(data_.V2d)(a.data_.V2d);break;
#define _impl_adt_Mc2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) _impl_adt_Mc2c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c)case kind::V2d:new(&data_.V2d)decltype(data_.V2d)(std::move(a.data_.V2d));break;
#define adt2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d) class NAME {public:enum class kind{_impl_adt_K2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)};private:kind kind_;union data{_impl_adt_D2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)}data_;public:class matcher{_impl_adt_MF2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)public:_impl_adt_MM2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)}}_impl_adt_M2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)void match(matcher const& m){switch(kind_){_impl_adt_MS2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)}}private:
#define _impl_adt_K2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_K2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)V2e,
#define _impl_adt_D2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)_impl_adt_D2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)_impl_adt_real(T2e)V2e;
#define _impl_adt_MF2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_MF2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)std::function<void(T2e)>V2e##_;
#define _impl_adt_MM2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_MM2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)template<class T=T2e>void call_##V2e(_impl_adt_real(T2e)a)const{_call_func(V2e##_, a);}matcher& V2e(std::function<void(T2e)>f){V2e##_=f;return *this;}
#define _impl_adt_M2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_M2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)template<class T=T2e,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2e(_impl_adt_real(T2e)const& t){NAME ret(kind::V2e);try{new(&ret.data_.V2e)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2e,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2e(_impl_adt_real(T2e)&& t){NAME ret(kind::V2e);try{new(&ret.data_.V2e)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2e,class=std::enable_if_t<std::is_void<T>::value>>static NAME V2e(){NAME ret(kind::V2e);return ret;}
#define _impl_adt_MS2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_MS2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)case kind::V2e:m.call_##V2e(data_.V2e);break;
#define _impl_adt_Ds2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_Ds2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)case kind::V2e:data_.V2e.~decltype(data_.V2e)();break;
#define _impl_adt_Cc2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_Cc2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)case kind::V2e:new(&data_.V2e)decltype(data_.V2e)(a.data_.V2e);break;
#define _impl_adt_Mc2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) _impl_adt_Mc2d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d)case kind::V2e:new(&data_.V2e)decltype(data_.V2e)(std::move(a.data_.V2e));break;
#define adt2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e) class NAME {public:enum class kind{_impl_adt_K2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)};private:kind kind_;union data{_impl_adt_D2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)}data_;public:class matcher{_impl_adt_MF2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)public:_impl_adt_MM2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)}}_impl_adt_M2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)void match(matcher const& m){switch(kind_){_impl_adt_MS2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)}}private:
#define _impl_adt_K2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_K2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)V2f,
#define _impl_adt_D2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)_impl_adt_D2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)_impl_adt_real(T2f)V2f;
#define _impl_adt_MF2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_MF2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)std::function<void(T2f)>V2f##_;
#define _impl_adt_MM2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_MM2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)template<class T=T2f>void call_##V2f(_impl_adt_real(T2f)a)const{_call_func(V2f##_, a);}matcher& V2f(std::function<void(T2f)>f){V2f##_=f;return *this;}
#define _impl_adt_M2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_M2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)template<class T=T2f,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2f(_impl_adt_real(T2f)const& t){NAME ret(kind::V2f);try{new(&ret.data_.V2f)T(t);}catch(...){std::terminate();}return ret;}template<class T=T2f,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V2f(_impl_adt_real(T2f)&& t){NAME ret(kind::V2f);try{new(&ret.data_.V2f)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T2f,class=std::enable_if_t<std::is_void<T>::value>>static NAME V2f(){NAME ret(kind::V2f);return ret;}
#define _impl_adt_MS2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_MS2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)case kind::V2f:m.call_##V2f(data_.V2f);break;
#define _impl_adt_Ds2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_Ds2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)case kind::V2f:data_.V2f.~decltype(data_.V2f)();break;
#define _impl_adt_Cc2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_Cc2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)case kind::V2f:new(&data_.V2f)decltype(data_.V2f)(a.data_.V2f);break;
#define _impl_adt_Mc2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) _impl_adt_Mc2e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e)case kind::V2f:new(&data_.V2f)decltype(data_.V2f)(std::move(a.data_.V2f));break;
#define adt2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f) class NAME {public:enum class kind{_impl_adt_K2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)};private:kind kind_;union data{_impl_adt_D2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)}data_;public:class matcher{_impl_adt_MF2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)public:_impl_adt_MM2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)}}_impl_adt_M2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)void match(matcher const& m){switch(kind_){_impl_adt_MS2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)}}private:
#define _impl_adt_K30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_K2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)V30,
#define _impl_adt_D30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)_impl_adt_D2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)_impl_adt_real(T30)V30;
#define _impl_adt_MF30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_MF2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)std::function<void(T30)>V30##_;
#define _impl_adt_MM30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_MM2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)template<class T=T30>void call_##V30(_impl_adt_real(T30)a)const{_call_func(V30##_, a);}matcher& V30(std::function<void(T30)>f){V30##_=f;return *this;}
#define _impl_adt_M30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_M2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)template<class T=T30,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V30(_impl_adt_real(T30)const& t){NAME ret(kind::V30);try{new(&ret.data_.V30)T(t);}catch(...){std::terminate();}return ret;}template<class T=T30,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V30(_impl_adt_real(T30)&& t){NAME ret(kind::V30);try{new(&ret.data_.V30)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T30,class=std::enable_if_t<std::is_void<T>::value>>static NAME V30(){NAME ret(kind::V30);return ret;}
#define _impl_adt_MS30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_MS2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)case kind::V30:m.call_##V30(data_.V30);break;
#define _impl_adt_Ds30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_Ds2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)case kind::V30:data_.V30.~decltype(data_.V30)();break;
#define _impl_adt_Cc30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_Cc2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)case kind::V30:new(&data_.V30)decltype(data_.V30)(a.data_.V30);break;
#define _impl_adt_Mc30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) _impl_adt_Mc2f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f)case kind::V30:new(&data_.V30)decltype(data_.V30)(std::move(a.data_.V30));break;
#define adt30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30) class NAME {public:enum class kind{_impl_adt_K30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)};private:kind kind_;union data{_impl_adt_D30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)}data_;public:class matcher{_impl_adt_MF30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)public:_impl_adt_MM30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)}}_impl_adt_M30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)void match(matcher const& m){switch(kind_){_impl_adt_MS30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)}}private:
#define _impl_adt_K31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_K30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)V31,
#define _impl_adt_D31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)_impl_adt_D30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)_impl_adt_real(T31)V31;
#define _impl_adt_MF31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_MF30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)std::function<void(T31)>V31##_;
#define _impl_adt_MM31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_MM30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)template<class T=T31>void call_##V31(_impl_adt_real(T31)a)const{_call_func(V31##_, a);}matcher& V31(std::function<void(T31)>f){V31##_=f;return *this;}
#define _impl_adt_M31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_M30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)template<class T=T31,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V31(_impl_adt_real(T31)const& t){NAME ret(kind::V31);try{new(&ret.data_.V31)T(t);}catch(...){std::terminate();}return ret;}template<class T=T31,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V31(_impl_adt_real(T31)&& t){NAME ret(kind::V31);try{new(&ret.data_.V31)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T31,class=std::enable_if_t<std::is_void<T>::value>>static NAME V31(){NAME ret(kind::V31);return ret;}
#define _impl_adt_MS31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_MS30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)case kind::V31:m.call_##V31(data_.V31);break;
#define _impl_adt_Ds31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_Ds30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)case kind::V31:data_.V31.~decltype(data_.V31)();break;
#define _impl_adt_Cc31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_Cc30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)case kind::V31:new(&data_.V31)decltype(data_.V31)(a.data_.V31);break;
#define _impl_adt_Mc31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) _impl_adt_Mc30(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30)case kind::V31:new(&data_.V31)decltype(data_.V31)(std::move(a.data_.V31));break;
#define adt31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31) class NAME {public:enum class kind{_impl_adt_K31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)};private:kind kind_;union data{_impl_adt_D31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)}data_;public:class matcher{_impl_adt_MF31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)public:_impl_adt_MM31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)}}_impl_adt_M31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)void match(matcher const& m){switch(kind_){_impl_adt_MS31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)}}private:
#define _impl_adt_K32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_K31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)V32,
#define _impl_adt_D32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)_impl_adt_D31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)_impl_adt_real(T32)V32;
#define _impl_adt_MF32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_MF31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)std::function<void(T32)>V32##_;
#define _impl_adt_MM32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_MM31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)template<class T=T32>void call_##V32(_impl_adt_real(T32)a)const{_call_func(V32##_, a);}matcher& V32(std::function<void(T32)>f){V32##_=f;return *this;}
#define _impl_adt_M32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_M31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)template<class T=T32,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V32(_impl_adt_real(T32)const& t){NAME ret(kind::V32);try{new(&ret.data_.V32)T(t);}catch(...){std::terminate();}return ret;}template<class T=T32,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V32(_impl_adt_real(T32)&& t){NAME ret(kind::V32);try{new(&ret.data_.V32)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T32,class=std::enable_if_t<std::is_void<T>::value>>static NAME V32(){NAME ret(kind::V32);return ret;}
#define _impl_adt_MS32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_MS31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)case kind::V32:m.call_##V32(data_.V32);break;
#define _impl_adt_Ds32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_Ds31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)case kind::V32:data_.V32.~decltype(data_.V32)();break;
#define _impl_adt_Cc32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_Cc31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)case kind::V32:new(&data_.V32)decltype(data_.V32)(a.data_.V32);break;
#define _impl_adt_Mc32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) _impl_adt_Mc31(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31)case kind::V32:new(&data_.V32)decltype(data_.V32)(std::move(a.data_.V32));break;
#define adt32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32) class NAME {public:enum class kind{_impl_adt_K32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)};private:kind kind_;union data{_impl_adt_D32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)}data_;public:class matcher{_impl_adt_MF32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)public:_impl_adt_MM32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)}}_impl_adt_M32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)void match(matcher const& m){switch(kind_){_impl_adt_MS32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)}}private:
#define _impl_adt_K33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_K32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)V33,
#define _impl_adt_D33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)_impl_adt_D32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)_impl_adt_real(T33)V33;
#define _impl_adt_MF33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_MF32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)std::function<void(T33)>V33##_;
#define _impl_adt_MM33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_MM32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)template<class T=T33>void call_##V33(_impl_adt_real(T33)a)const{_call_func(V33##_, a);}matcher& V33(std::function<void(T33)>f){V33##_=f;return *this;}
#define _impl_adt_M33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_M32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)template<class T=T33,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V33(_impl_adt_real(T33)const& t){NAME ret(kind::V33);try{new(&ret.data_.V33)T(t);}catch(...){std::terminate();}return ret;}template<class T=T33,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V33(_impl_adt_real(T33)&& t){NAME ret(kind::V33);try{new(&ret.data_.V33)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T33,class=std::enable_if_t<std::is_void<T>::value>>static NAME V33(){NAME ret(kind::V33);return ret;}
#define _impl_adt_MS33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_MS32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)case kind::V33:m.call_##V33(data_.V33);break;
#define _impl_adt_Ds33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_Ds32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)case kind::V33:data_.V33.~decltype(data_.V33)();break;
#define _impl_adt_Cc33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_Cc32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)case kind::V33:new(&data_.V33)decltype(data_.V33)(a.data_.V33);break;
#define _impl_adt_Mc33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) _impl_adt_Mc32(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32)case kind::V33:new(&data_.V33)decltype(data_.V33)(std::move(a.data_.V33));break;
#define adt33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33) class NAME {public:enum class kind{_impl_adt_K33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)};private:kind kind_;union data{_impl_adt_D33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)}data_;public:class matcher{_impl_adt_MF33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)public:_impl_adt_MM33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)}}_impl_adt_M33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)void match(matcher const& m){switch(kind_){_impl_adt_MS33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)}}private:
#define _impl_adt_K34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_K33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)V34,
#define _impl_adt_D34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)_impl_adt_D33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)_impl_adt_real(T34)V34;
#define _impl_adt_MF34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_MF33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)std::function<void(T34)>V34##_;
#define _impl_adt_MM34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_MM33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)template<class T=T34>void call_##V34(_impl_adt_real(T34)a)const{_call_func(V34##_, a);}matcher& V34(std::function<void(T34)>f){V34##_=f;return *this;}
#define _impl_adt_M34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_M33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)template<class T=T34,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V34(_impl_adt_real(T34)const& t){NAME ret(kind::V34);try{new(&ret.data_.V34)T(t);}catch(...){std::terminate();}return ret;}template<class T=T34,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V34(_impl_adt_real(T34)&& t){NAME ret(kind::V34);try{new(&ret.data_.V34)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T34,class=std::enable_if_t<std::is_void<T>::value>>static NAME V34(){NAME ret(kind::V34);return ret;}
#define _impl_adt_MS34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_MS33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)case kind::V34:m.call_##V34(data_.V34);break;
#define _impl_adt_Ds34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_Ds33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)case kind::V34:data_.V34.~decltype(data_.V34)();break;
#define _impl_adt_Cc34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_Cc33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)case kind::V34:new(&data_.V34)decltype(data_.V34)(a.data_.V34);break;
#define _impl_adt_Mc34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) _impl_adt_Mc33(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33)case kind::V34:new(&data_.V34)decltype(data_.V34)(std::move(a.data_.V34));break;
#define adt34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34) class NAME {public:enum class kind{_impl_adt_K34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)};private:kind kind_;union data{_impl_adt_D34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)}data_;public:class matcher{_impl_adt_MF34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)public:_impl_adt_MM34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)}}_impl_adt_M34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)void match(matcher const& m){switch(kind_){_impl_adt_MS34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)}}private:
#define _impl_adt_K35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_K34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)V35,
#define _impl_adt_D35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)_impl_adt_D34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)_impl_adt_real(T35)V35;
#define _impl_adt_MF35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_MF34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)std::function<void(T35)>V35##_;
#define _impl_adt_MM35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_MM34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)template<class T=T35>void call_##V35(_impl_adt_real(T35)a)const{_call_func(V35##_, a);}matcher& V35(std::function<void(T35)>f){V35##_=f;return *this;}
#define _impl_adt_M35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_M34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)template<class T=T35,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V35(_impl_adt_real(T35)const& t){NAME ret(kind::V35);try{new(&ret.data_.V35)T(t);}catch(...){std::terminate();}return ret;}template<class T=T35,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V35(_impl_adt_real(T35)&& t){NAME ret(kind::V35);try{new(&ret.data_.V35)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T35,class=std::enable_if_t<std::is_void<T>::value>>static NAME V35(){NAME ret(kind::V35);return ret;}
#define _impl_adt_MS35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_MS34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)case kind::V35:m.call_##V35(data_.V35);break;
#define _impl_adt_Ds35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_Ds34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)case kind::V35:data_.V35.~decltype(data_.V35)();break;
#define _impl_adt_Cc35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_Cc34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)case kind::V35:new(&data_.V35)decltype(data_.V35)(a.data_.V35);break;
#define _impl_adt_Mc35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) _impl_adt_Mc34(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34)case kind::V35:new(&data_.V35)decltype(data_.V35)(std::move(a.data_.V35));break;
#define adt35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35) class NAME {public:enum class kind{_impl_adt_K35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)};private:kind kind_;union data{_impl_adt_D35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)}data_;public:class matcher{_impl_adt_MF35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)public:_impl_adt_MM35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)}}_impl_adt_M35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)void match(matcher const& m){switch(kind_){_impl_adt_MS35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)}}private:
#define _impl_adt_K36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_K35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)V36,
#define _impl_adt_D36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)_impl_adt_D35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)_impl_adt_real(T36)V36;
#define _impl_adt_MF36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_MF35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)std::function<void(T36)>V36##_;
#define _impl_adt_MM36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_MM35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)template<class T=T36>void call_##V36(_impl_adt_real(T36)a)const{_call_func(V36##_, a);}matcher& V36(std::function<void(T36)>f){V36##_=f;return *this;}
#define _impl_adt_M36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_M35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)template<class T=T36,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V36(_impl_adt_real(T36)const& t){NAME ret(kind::V36);try{new(&ret.data_.V36)T(t);}catch(...){std::terminate();}return ret;}template<class T=T36,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V36(_impl_adt_real(T36)&& t){NAME ret(kind::V36);try{new(&ret.data_.V36)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T36,class=std::enable_if_t<std::is_void<T>::value>>static NAME V36(){NAME ret(kind::V36);return ret;}
#define _impl_adt_MS36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_MS35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)case kind::V36:m.call_##V36(data_.V36);break;
#define _impl_adt_Ds36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_Ds35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)case kind::V36:data_.V36.~decltype(data_.V36)();break;
#define _impl_adt_Cc36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_Cc35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)case kind::V36:new(&data_.V36)decltype(data_.V36)(a.data_.V36);break;
#define _impl_adt_Mc36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) _impl_adt_Mc35(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35)case kind::V36:new(&data_.V36)decltype(data_.V36)(std::move(a.data_.V36));break;
#define adt36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36) class NAME {public:enum class kind{_impl_adt_K36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)};private:kind kind_;union data{_impl_adt_D36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)}data_;public:class matcher{_impl_adt_MF36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)public:_impl_adt_MM36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)}}_impl_adt_M36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)void match(matcher const& m){switch(kind_){_impl_adt_MS36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)}}private:
#define _impl_adt_K37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_K36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)V37,
#define _impl_adt_D37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)_impl_adt_D36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)_impl_adt_real(T37)V37;
#define _impl_adt_MF37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_MF36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)std::function<void(T37)>V37##_;
#define _impl_adt_MM37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_MM36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)template<class T=T37>void call_##V37(_impl_adt_real(T37)a)const{_call_func(V37##_, a);}matcher& V37(std::function<void(T37)>f){V37##_=f;return *this;}
#define _impl_adt_M37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_M36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)template<class T=T37,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V37(_impl_adt_real(T37)const& t){NAME ret(kind::V37);try{new(&ret.data_.V37)T(t);}catch(...){std::terminate();}return ret;}template<class T=T37,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V37(_impl_adt_real(T37)&& t){NAME ret(kind::V37);try{new(&ret.data_.V37)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T37,class=std::enable_if_t<std::is_void<T>::value>>static NAME V37(){NAME ret(kind::V37);return ret;}
#define _impl_adt_MS37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_MS36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)case kind::V37:m.call_##V37(data_.V37);break;
#define _impl_adt_Ds37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_Ds36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)case kind::V37:data_.V37.~decltype(data_.V37)();break;
#define _impl_adt_Cc37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_Cc36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)case kind::V37:new(&data_.V37)decltype(data_.V37)(a.data_.V37);break;
#define _impl_adt_Mc37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) _impl_adt_Mc36(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36)case kind::V37:new(&data_.V37)decltype(data_.V37)(std::move(a.data_.V37));break;
#define adt37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37) class NAME {public:enum class kind{_impl_adt_K37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)};private:kind kind_;union data{_impl_adt_D37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)}data_;public:class matcher{_impl_adt_MF37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)public:_impl_adt_MM37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)}}_impl_adt_M37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)void match(matcher const& m){switch(kind_){_impl_adt_MS37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)}}private:
#define _impl_adt_K38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_K37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)V38,
#define _impl_adt_D38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)_impl_adt_D37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)_impl_adt_real(T38)V38;
#define _impl_adt_MF38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_MF37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)std::function<void(T38)>V38##_;
#define _impl_adt_MM38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_MM37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)template<class T=T38>void call_##V38(_impl_adt_real(T38)a)const{_call_func(V38##_, a);}matcher& V38(std::function<void(T38)>f){V38##_=f;return *this;}
#define _impl_adt_M38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_M37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)template<class T=T38,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V38(_impl_adt_real(T38)const& t){NAME ret(kind::V38);try{new(&ret.data_.V38)T(t);}catch(...){std::terminate();}return ret;}template<class T=T38,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V38(_impl_adt_real(T38)&& t){NAME ret(kind::V38);try{new(&ret.data_.V38)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T38,class=std::enable_if_t<std::is_void<T>::value>>static NAME V38(){NAME ret(kind::V38);return ret;}
#define _impl_adt_MS38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_MS37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)case kind::V38:m.call_##V38(data_.V38);break;
#define _impl_adt_Ds38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_Ds37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)case kind::V38:data_.V38.~decltype(data_.V38)();break;
#define _impl_adt_Cc38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_Cc37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)case kind::V38:new(&data_.V38)decltype(data_.V38)(a.data_.V38);break;
#define _impl_adt_Mc38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) _impl_adt_Mc37(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37)case kind::V38:new(&data_.V38)decltype(data_.V38)(std::move(a.data_.V38));break;
#define adt38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38) class NAME {public:enum class kind{_impl_adt_K38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)};private:kind kind_;union data{_impl_adt_D38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)}data_;public:class matcher{_impl_adt_MF38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)public:_impl_adt_MM38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)}}_impl_adt_M38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)void match(matcher const& m){switch(kind_){_impl_adt_MS38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)}}private:
#define _impl_adt_K39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_K38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)V39,
#define _impl_adt_D39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)_impl_adt_D38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)_impl_adt_real(T39)V39;
#define _impl_adt_MF39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_MF38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)std::function<void(T39)>V39##_;
#define _impl_adt_MM39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_MM38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)template<class T=T39>void call_##V39(_impl_adt_real(T39)a)const{_call_func(V39##_, a);}matcher& V39(std::function<void(T39)>f){V39##_=f;return *this;}
#define _impl_adt_M39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_M38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)template<class T=T39,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V39(_impl_adt_real(T39)const& t){NAME ret(kind::V39);try{new(&ret.data_.V39)T(t);}catch(...){std::terminate();}return ret;}template<class T=T39,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V39(_impl_adt_real(T39)&& t){NAME ret(kind::V39);try{new(&ret.data_.V39)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T39,class=std::enable_if_t<std::is_void<T>::value>>static NAME V39(){NAME ret(kind::V39);return ret;}
#define _impl_adt_MS39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_MS38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)case kind::V39:m.call_##V39(data_.V39);break;
#define _impl_adt_Ds39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_Ds38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)case kind::V39:data_.V39.~decltype(data_.V39)();break;
#define _impl_adt_Cc39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_Cc38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)case kind::V39:new(&data_.V39)decltype(data_.V39)(a.data_.V39);break;
#define _impl_adt_Mc39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) _impl_adt_Mc38(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38)case kind::V39:new(&data_.V39)decltype(data_.V39)(std::move(a.data_.V39));break;
#define adt39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39) class NAME {public:enum class kind{_impl_adt_K39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)};private:kind kind_;union data{_impl_adt_D39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)}data_;public:class matcher{_impl_adt_MF39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)public:_impl_adt_MM39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)}}_impl_adt_M39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)void match(matcher const& m){switch(kind_){_impl_adt_MS39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)}}private:
#define _impl_adt_K3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_K39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)V3a,
#define _impl_adt_D3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)_impl_adt_D39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)_impl_adt_real(T3a)V3a;
#define _impl_adt_MF3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_MF39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)std::function<void(T3a)>V3a##_;
#define _impl_adt_MM3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_MM39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)template<class T=T3a>void call_##V3a(_impl_adt_real(T3a)a)const{_call_func(V3a##_, a);}matcher& V3a(std::function<void(T3a)>f){V3a##_=f;return *this;}
#define _impl_adt_M3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_M39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)template<class T=T3a,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3a(_impl_adt_real(T3a)const& t){NAME ret(kind::V3a);try{new(&ret.data_.V3a)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3a,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3a(_impl_adt_real(T3a)&& t){NAME ret(kind::V3a);try{new(&ret.data_.V3a)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3a,class=std::enable_if_t<std::is_void<T>::value>>static NAME V3a(){NAME ret(kind::V3a);return ret;}
#define _impl_adt_MS3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_MS39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)case kind::V3a:m.call_##V3a(data_.V3a);break;
#define _impl_adt_Ds3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_Ds39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)case kind::V3a:data_.V3a.~decltype(data_.V3a)();break;
#define _impl_adt_Cc3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_Cc39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)case kind::V3a:new(&data_.V3a)decltype(data_.V3a)(a.data_.V3a);break;
#define _impl_adt_Mc3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) _impl_adt_Mc39(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39)case kind::V3a:new(&data_.V3a)decltype(data_.V3a)(std::move(a.data_.V3a));break;
#define adt3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a) class NAME {public:enum class kind{_impl_adt_K3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)};private:kind kind_;union data{_impl_adt_D3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)}data_;public:class matcher{_impl_adt_MF3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)public:_impl_adt_MM3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)}}_impl_adt_M3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)void match(matcher const& m){switch(kind_){_impl_adt_MS3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)}}private:
#define _impl_adt_K3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_K3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)V3b,
#define _impl_adt_D3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)_impl_adt_D3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)_impl_adt_real(T3b)V3b;
#define _impl_adt_MF3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_MF3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)std::function<void(T3b)>V3b##_;
#define _impl_adt_MM3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_MM3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)template<class T=T3b>void call_##V3b(_impl_adt_real(T3b)a)const{_call_func(V3b##_, a);}matcher& V3b(std::function<void(T3b)>f){V3b##_=f;return *this;}
#define _impl_adt_M3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_M3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)template<class T=T3b,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3b(_impl_adt_real(T3b)const& t){NAME ret(kind::V3b);try{new(&ret.data_.V3b)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3b,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3b(_impl_adt_real(T3b)&& t){NAME ret(kind::V3b);try{new(&ret.data_.V3b)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3b,class=std::enable_if_t<std::is_void<T>::value>>static NAME V3b(){NAME ret(kind::V3b);return ret;}
#define _impl_adt_MS3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_MS3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)case kind::V3b:m.call_##V3b(data_.V3b);break;
#define _impl_adt_Ds3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_Ds3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)case kind::V3b:data_.V3b.~decltype(data_.V3b)();break;
#define _impl_adt_Cc3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_Cc3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)case kind::V3b:new(&data_.V3b)decltype(data_.V3b)(a.data_.V3b);break;
#define _impl_adt_Mc3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) _impl_adt_Mc3a(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a)case kind::V3b:new(&data_.V3b)decltype(data_.V3b)(std::move(a.data_.V3b));break;
#define adt3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b) class NAME {public:enum class kind{_impl_adt_K3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)};private:kind kind_;union data{_impl_adt_D3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)}data_;public:class matcher{_impl_adt_MF3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)public:_impl_adt_MM3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)}}_impl_adt_M3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)void match(matcher const& m){switch(kind_){_impl_adt_MS3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)}}private:
#define _impl_adt_K3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_K3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)V3c,
#define _impl_adt_D3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)_impl_adt_D3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)_impl_adt_real(T3c)V3c;
#define _impl_adt_MF3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_MF3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)std::function<void(T3c)>V3c##_;
#define _impl_adt_MM3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_MM3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)template<class T=T3c>void call_##V3c(_impl_adt_real(T3c)a)const{_call_func(V3c##_, a);}matcher& V3c(std::function<void(T3c)>f){V3c##_=f;return *this;}
#define _impl_adt_M3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_M3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)template<class T=T3c,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3c(_impl_adt_real(T3c)const& t){NAME ret(kind::V3c);try{new(&ret.data_.V3c)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3c,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3c(_impl_adt_real(T3c)&& t){NAME ret(kind::V3c);try{new(&ret.data_.V3c)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3c,class=std::enable_if_t<std::is_void<T>::value>>static NAME V3c(){NAME ret(kind::V3c);return ret;}
#define _impl_adt_MS3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_MS3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)case kind::V3c:m.call_##V3c(data_.V3c);break;
#define _impl_adt_Ds3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_Ds3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)case kind::V3c:data_.V3c.~decltype(data_.V3c)();break;
#define _impl_adt_Cc3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_Cc3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)case kind::V3c:new(&data_.V3c)decltype(data_.V3c)(a.data_.V3c);break;
#define _impl_adt_Mc3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) _impl_adt_Mc3b(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b)case kind::V3c:new(&data_.V3c)decltype(data_.V3c)(std::move(a.data_.V3c));break;
#define adt3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c) class NAME {public:enum class kind{_impl_adt_K3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)};private:kind kind_;union data{_impl_adt_D3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)}data_;public:class matcher{_impl_adt_MF3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)public:_impl_adt_MM3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)}}_impl_adt_M3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)void match(matcher const& m){switch(kind_){_impl_adt_MS3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)}}private:
#define _impl_adt_K3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_K3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)V3d,
#define _impl_adt_D3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)_impl_adt_D3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)_impl_adt_real(T3d)V3d;
#define _impl_adt_MF3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_MF3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)std::function<void(T3d)>V3d##_;
#define _impl_adt_MM3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_MM3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)template<class T=T3d>void call_##V3d(_impl_adt_real(T3d)a)const{_call_func(V3d##_, a);}matcher& V3d(std::function<void(T3d)>f){V3d##_=f;return *this;}
#define _impl_adt_M3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_M3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)template<class T=T3d,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3d(_impl_adt_real(T3d)const& t){NAME ret(kind::V3d);try{new(&ret.data_.V3d)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3d,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3d(_impl_adt_real(T3d)&& t){NAME ret(kind::V3d);try{new(&ret.data_.V3d)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3d,class=std::enable_if_t<std::is_void<T>::value>>static NAME V3d(){NAME ret(kind::V3d);return ret;}
#define _impl_adt_MS3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_MS3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)case kind::V3d:m.call_##V3d(data_.V3d);break;
#define _impl_adt_Ds3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_Ds3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)case kind::V3d:data_.V3d.~decltype(data_.V3d)();break;
#define _impl_adt_Cc3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_Cc3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)case kind::V3d:new(&data_.V3d)decltype(data_.V3d)(a.data_.V3d);break;
#define _impl_adt_Mc3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) _impl_adt_Mc3c(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c)case kind::V3d:new(&data_.V3d)decltype(data_.V3d)(std::move(a.data_.V3d));break;
#define adt3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d) class NAME {public:enum class kind{_impl_adt_K3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)};private:kind kind_;union data{_impl_adt_D3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)}data_;public:class matcher{_impl_adt_MF3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)public:_impl_adt_MM3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)}}_impl_adt_M3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)void match(matcher const& m){switch(kind_){_impl_adt_MS3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)}}private:
#define _impl_adt_K3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_K3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)V3e,
#define _impl_adt_D3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)_impl_adt_D3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)_impl_adt_real(T3e)V3e;
#define _impl_adt_MF3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_MF3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)std::function<void(T3e)>V3e##_;
#define _impl_adt_MM3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_MM3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)template<class T=T3e>void call_##V3e(_impl_adt_real(T3e)a)const{_call_func(V3e##_, a);}matcher& V3e(std::function<void(T3e)>f){V3e##_=f;return *this;}
#define _impl_adt_M3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_M3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)template<class T=T3e,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3e(_impl_adt_real(T3e)const& t){NAME ret(kind::V3e);try{new(&ret.data_.V3e)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3e,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3e(_impl_adt_real(T3e)&& t){NAME ret(kind::V3e);try{new(&ret.data_.V3e)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3e,class=std::enable_if_t<std::is_void<T>::value>>static NAME V3e(){NAME ret(kind::V3e);return ret;}
#define _impl_adt_MS3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_MS3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)case kind::V3e:m.call_##V3e(data_.V3e);break;
#define _impl_adt_Ds3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_Ds3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)case kind::V3e:data_.V3e.~decltype(data_.V3e)();break;
#define _impl_adt_Cc3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_Cc3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)case kind::V3e:new(&data_.V3e)decltype(data_.V3e)(a.data_.V3e);break;
#define _impl_adt_Mc3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) _impl_adt_Mc3d(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d)case kind::V3e:new(&data_.V3e)decltype(data_.V3e)(std::move(a.data_.V3e));break;
#define adt3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e) class NAME {public:enum class kind{_impl_adt_K3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)};private:kind kind_;union data{_impl_adt_D3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)}data_;public:class matcher{_impl_adt_MF3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)public:_impl_adt_MM3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)}}_impl_adt_M3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)void match(matcher const& m){switch(kind_){_impl_adt_MS3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)}}private:
#define _impl_adt_K3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_K3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)V3f,
#define _impl_adt_D3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)_impl_adt_D3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)_impl_adt_real(T3f)V3f;
#define _impl_adt_MF3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_MF3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)std::function<void(T3f)>V3f##_;
#define _impl_adt_MM3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_MM3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)template<class T=T3f>void call_##V3f(_impl_adt_real(T3f)a)const{_call_func(V3f##_, a);}matcher& V3f(std::function<void(T3f)>f){V3f##_=f;return *this;}
#define _impl_adt_M3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_M3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)template<class T=T3f,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3f(_impl_adt_real(T3f)const& t){NAME ret(kind::V3f);try{new(&ret.data_.V3f)T(t);}catch(...){std::terminate();}return ret;}template<class T=T3f,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V3f(_impl_adt_real(T3f)&& t){NAME ret(kind::V3f);try{new(&ret.data_.V3f)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T3f,class=std::enable_if_t<std::is_void<T>::value>>static NAME V3f(){NAME ret(kind::V3f);return ret;}
#define _impl_adt_MS3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_MS3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)case kind::V3f:m.call_##V3f(data_.V3f);break;
#define _impl_adt_Ds3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_Ds3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)case kind::V3f:data_.V3f.~decltype(data_.V3f)();break;
#define _impl_adt_Cc3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_Cc3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)case kind::V3f:new(&data_.V3f)decltype(data_.V3f)(a.data_.V3f);break;
#define _impl_adt_Mc3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) _impl_adt_Mc3e(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e)case kind::V3f:new(&data_.V3f)decltype(data_.V3f)(std::move(a.data_.V3f));break;
#define adt3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f) class NAME {public:enum class kind{_impl_adt_K3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)};private:kind kind_;union data{_impl_adt_D3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)}data_;public:class matcher{_impl_adt_MF3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)public:_impl_adt_MM3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)}}_impl_adt_M3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)void match(matcher const& m){switch(kind_){_impl_adt_MS3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)}}private:
#define _impl_adt_K40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_K3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)V40,
#define _impl_adt_D40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)_impl_adt_D3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)_impl_adt_real(T40)V40;
#define _impl_adt_MF40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_MF3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)std::function<void(T40)>V40##_;
#define _impl_adt_MM40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_MM3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)template<class T=T40>void call_##V40(_impl_adt_real(T40)a)const{_call_func(V40##_, a);}matcher& V40(std::function<void(T40)>f){V40##_=f;return *this;}
#define _impl_adt_M40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_M3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)template<class T=T40,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V40(_impl_adt_real(T40)const& t){NAME ret(kind::V40);try{new(&ret.data_.V40)T(t);}catch(...){std::terminate();}return ret;}template<class T=T40,class=std::enable_if_t<!std::is_void<T>::value>>static NAME V40(_impl_adt_real(T40)&& t){NAME ret(kind::V40);try{new(&ret.data_.V40)T(std::move(t));}catch(...){std::terminate();}return ret;}template<class T=T40,class=std::enable_if_t<std::is_void<T>::value>>static NAME V40(){NAME ret(kind::V40);return ret;}
#define _impl_adt_MS40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_MS3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)case kind::V40:m.call_##V40(data_.V40);break;
#define _impl_adt_Ds40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_Ds3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)case kind::V40:data_.V40.~decltype(data_.V40)();break;
#define _impl_adt_Cc40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_Cc3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)case kind::V40:new(&data_.V40)decltype(data_.V40)(a.data_.V40);break;
#define _impl_adt_Mc40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) _impl_adt_Mc3f(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f)case kind::V40:new(&data_.V40)decltype(data_.V40)(std::move(a.data_.V40));break;
#define adt40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40) class NAME {public:enum class kind{_impl_adt_K40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)};private:kind kind_;union data{_impl_adt_D40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)}data_;public:class matcher{_impl_adt_MF40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)public:_impl_adt_MM40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)};friend void swap(NAME& l, NAME& r){std::swap(l.kind_,r.kind_);std::swap(l.data_,r.data_);}NAME(NAME const& a):NAME(a.kind_){switch(kind_){_impl_adt_Cc40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)}}NAME(NAME&& a):NAME(a.kind_){switch(kind_){_impl_adt_Mc40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)}}NAME& operator=(NAME o){swap(*this,o);return *this;}~NAME(){switch(kind_){_impl_adt_Ds40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)}}_impl_adt_M40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)void match(matcher const& m){switch(kind_){_impl_adt_MS40(NAME,V1,T1,V2,T2,V3,T3,V4,T4,V5,T5,V6,T6,V7,T7,V8,T8,V9,T9,Va,Ta,Vb,Tb,Vc,Tc,Vd,Td,Ve,Te,Vf,Tf,V10,T10,V11,T11,V12,T12,V13,T13,V14,T14,V15,T15,V16,T16,V17,T17,V18,T18,V19,T19,V1a,T1a,V1b,T1b,V1c,T1c,V1d,T1d,V1e,T1e,V1f,T1f,V20,T20,V21,T21,V22,T22,V23,T23,V24,T24,V25,T25,V26,T26,V27,T27,V28,T28,V29,T29,V2a,T2a,V2b,T2b,V2c,T2c,V2d,T2d,V2e,T2e,V2f,T2f,V30,T30,V31,T31,V32,T32,V33,T33,V34,T34,V35,T35,V36,T36,V37,T37,V38,T38,V39,T39,V3a,T3a,V3b,T3b,V3c,T3c,V3d,T3d,V3e,T3e,V3f,T3f,V40,T40)}}private:
